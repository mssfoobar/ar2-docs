openapi: 3.0.1
info:
  title: IAMS API
  description: AGIL Ops Hub Identity and Access Management Service
  version: 1.0.0
servers:
- url: http://{{iams-aas_endpoint}}
  description: Generated server url
tags:
- name: Tenants Resource Permissions
  description: The Tenant Resource PermissionsAPI
- name: Tenants Resources
  description: The Tenant Resource API
- name: Tenants Groups
  description: The Tenant Group API
- name: Tenants
  description: The Tenant API
- name: Tenant Memberships
  description: The Tenant Membership API
- name: System administrator
  description: The System Administrator Management API
- name: Tenants User Permissions
  description: The Tenant User Permissions API
- name: Tenant administrator
  description: The Tenant Administrator Management API
- name: Tenant Roles
  description: The Tenant Roles API
- name: Tenants Scopes
  description: The Tenant Scope API
- name: Users
  description: The User API
paths:
  /admin/users/{userId}:
    get:
      tags:
      - Users
      summary: Get representation of the user
      operationId: getUser
      parameters:
      - name: userId
        in: path
        description: UUID of user. Not the username
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: Valid access token as a Bearer credential in an HTTP Authorization
          header
        required: true
        schema:
          type: string
      responses:
        "401":
          description: Unauthorized
        "200":
          description: Ok
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserRepresentation"
    put:
      tags:
      - Users
      summary: Update the user
      operationId: updateUser
      parameters:
      - name: userId
        in: path
        description: UUID of user. Not the username
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: Valid access token as a Bearer credential in an HTTP Authorization
          header
        required: true
        schema:
          type: string
      requestBody:
        description: "Fields to be updated. Note: user id must be provided."
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserRepresentation"
        required: true
      responses:
        "200":
          description: Ok
        "403":
          description: Forbidden
        "401":
          description: Unauthorized
    delete:
      tags:
      - Users
      summary: Delete the user
      operationId: deleteUser
      parameters:
      - name: userId
        in: path
        description: UUID of user. Not the username
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: Valid access token as a Bearer credential in an HTTP Authorization
          header
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Ok
        "403":
          description: Forbidden
        "401":
          description: Unauthorized
  /admin/users/{userId}/reset-password:
    put:
      tags:
      - Users
      summary: Set up a new password for the user.
      operationId: updateUserPassword
      parameters:
      - name: userId
        in: path
        description: UUID of user. Not the username
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: Valid access token as a Bearer credential in an HTTP Authorization
          header
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PasswordRepresentation"
        required: true
      responses:
        "200":
          description: Ok
        "403":
          description: Forbidden
        "401":
          description: Unauthorized
  /admin/tenants/{tenantId}/users/{userId}/groups/{groupId}:
    put:
      tags:
      - Tenants Groups
      summary: Add user to group.
      operationId: addUserToTenantGroup
      parameters:
      - name: tenantId
        in: path
        required: true
        schema:
          type: string
      - name: userId
        in: path
        description: UUID of user. Not the username
        required: true
        schema:
          type: string
      - name: groupId
        in: path
        description: Group id and not name
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: Valid access token as a Bearer credential in an HTTP Authorization
          header
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Updated
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
    delete:
      tags:
      - Tenants Groups
      summary: Remove user from group.
      operationId: removeUserFromTenantGroup
      parameters:
      - name: tenantId
        in: path
        required: true
        schema:
          type: string
      - name: userId
        in: path
        description: UUID of user. Not the username
        required: true
        schema:
          type: string
      - name: groupId
        in: path
        description: Group id and not name
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: Valid access token as a Bearer credential in an HTTP Authorization
          header
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Updated
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
  /admin/tenants/{tenantId}/scopes/{scopeId}:
    put:
      tags:
      - Tenants Scopes
      summary: Update tenant scope
      operationId: updateTenantScope
      parameters:
      - name: tenantId
        in: path
        required: true
        schema:
          type: string
      - name: scopeId
        in: path
        description: Scope Id. Not name
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: Valid access token as a Bearer credential in an HTTP Authorization
          header
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ScopeRepresentation"
        required: true
      responses:
        "200":
          description: Ok
        "403":
          description: Forbidden
        "401":
          description: Unauthorized
    delete:
      tags:
      - Tenants Scopes
      summary: Delete tenant scope.
      operationId: deleteTenantScope
      parameters:
      - name: tenantId
        in: path
        required: true
        schema:
          type: string
      - name: scopeId
        in: path
        description: Scope Id. Not name
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: Valid access token as a Bearer credential in an HTTP Authorization
          header
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Ok
        "403":
          description: Forbidden
        "401":
          description: Unauthorized
  /admin/tenants/{tenantId}/roles/{role-name}:
    get:
      tags:
      - Tenant Roles
      summary: Get role by rolename
      operationId: getTenantRoles
      parameters:
      - name: tenantId
        in: path
        required: true
        schema:
          type: string
      - name: role-name
        in: path
        description: Role name and not the role id
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: Valid access token as a Bearer credential in an HTTP Authorization
          header
        required: true
        schema:
          type: string
      responses:
        "401":
          description: Unauthorized
        "200":
          description: Ok
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RoleRepresentation"
    put:
      tags:
      - Tenant Roles
      summary: Update tenant role
      operationId: updateTenantRole
      parameters:
      - name: tenantId
        in: path
        required: true
        schema:
          type: string
      - name: role-name
        in: path
        description: Role name and not the role id
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: Valid access token as a Bearer credential in an HTTP Authorization
          header
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RoleRepresentation"
        required: true
      responses:
        "200":
          description: Ok
        "403":
          description: Forbidden
        "401":
          description: Unauthorized
    delete:
      tags:
      - Tenant Roles
      summary: Delete role.
      operationId: deleteTenantRole
      parameters:
      - name: tenantId
        in: path
        required: true
        schema:
          type: string
      - name: role-name
        in: path
        description: Role name and not the role id
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: Valid access token as a Bearer credential in an HTTP Authorization
          header
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Ok
        "403":
          description: Forbidden
        "401":
          description: Unauthorized
  /admin/tenants/{tenantId}/resources/{resourceId}:
    get:
      tags:
      - Tenants Resources
      summary: Get tenant resources
      operationId: getTenantResource
      parameters:
      - name: tenantId
        in: path
        required: true
        schema:
          type: string
      - name: resourceId
        in: path
        description: Resource Id. Not name
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: Valid access token as a Bearer credential in an HTTP Authorization
          header
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceRepresentation"
        "401":
          description: Unauthorized
    put:
      tags:
      - Tenants Resources
      summary: Update tenant resource
      operationId: updateTenantResource
      parameters:
      - name: tenantId
        in: path
        required: true
        schema:
          type: string
      - name: resourceId
        in: path
        description: Resource Id. Not name
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: Valid access token as a Bearer credential in an HTTP Authorization
          header
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ResourceRepresentation"
        required: true
      responses:
        "200":
          description: Ok
        "403":
          description: Forbidden
        "401":
          description: Unauthorized
    delete:
      tags:
      - Tenants Resources
      summary: Delete tenant resource.
      operationId: deleteTenantResource
      parameters:
      - name: tenantId
        in: path
        required: true
        schema:
          type: string
      - name: resourceId
        in: path
        description: Resource Id. Not name
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: Valid access token as a Bearer credential in an HTTP Authorization
          header
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Ok
        "403":
          description: Forbidden
        "401":
          description: Unauthorized
  /admin/tenants/{tenantId}/resources/{resourceId}/scopes/{scopeId}:
    put:
      tags:
      - Tenants Resources
      summary: Add scope to tenant resource.
      operationId: addScopeToTenantResource
      parameters:
      - name: tenantId
        in: path
        required: true
        schema:
          type: string
      - name: resourceId
        in: path
        description: Resource Id. Not name
        required: true
        schema:
          type: string
      - name: scopeId
        in: path
        description: Scope Id. Not the name
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: Valid access token as a Bearer credential in an HTTP Authorization
          header
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Updated
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
    delete:
      tags:
      - Tenants Resources
      summary: Remove scope from resource.
      operationId: removeScopeFromTenantResource
      parameters:
      - name: tenantId
        in: path
        required: true
        schema:
          type: string
      - name: resourceId
        in: path
        description: Resource Id. Not name
        required: true
        schema:
          type: string
      - name: scopeId
        in: path
        description: Scope Id. Not the name
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: Valid access token as a Bearer credential in an HTTP Authorization
          header
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Updated
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
  /admin/tenants/{tenantId}/resources/{resourceId}/scopes/{scopeId}/permissions/users:
    get:
      tags:
      - Tenants Resource Permissions
      summary: List all user permissions of a tenant resources
      operationId: listUserPermissions
      parameters:
      - name: tenantId
        in: path
        required: true
        schema:
          type: string
      - name: resourceId
        in: path
        description: Resource Id. Not name
        required: true
        schema:
          type: string
      - name: scopeId
        in: path
        description: Scope Id. Not the name
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: Valid access token as a Bearer credential in an HTTP Authorization
          header
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        "401":
          description: Unauthorized
    put:
      tags:
      - Tenants Resource Permissions
      summary: Update user permission of a tenant resource
      operationId: updateUserPermissions
      parameters:
      - name: tenantId
        in: path
        required: true
        schema:
          type: string
      - name: resourceId
        in: path
        description: Resource Id. Not name
        required: true
        schema:
          type: string
      - name: scopeId
        in: path
        description: Scope Id. Not the name
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: Valid access token as a Bearer credential in an HTTP Authorization
          header
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              uniqueItems: true
              type: array
              description: List of userIds to be grant with specified scope for the
                resource.
              items:
                type: string
        required: true
      responses:
        "200":
          description: Ok
        "403":
          description: Forbidden
        "401":
          description: Unauthorized
  /admin/tenants/{tenantId}/resources/{resourceId}/scopes/{scopeId}/permissions/roles:
    get:
      tags:
      - Tenants Resource Permissions
      summary: List all role permissions of a tenant resources
      operationId: listRolePermissions
      parameters:
      - name: tenantId
        in: path
        required: true
        schema:
          type: string
      - name: resourceId
        in: path
        description: Resource Id. Not name
        required: true
        schema:
          type: string
      - name: scopeId
        in: path
        description: Scope Id. Not the name
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: Valid access token as a Bearer credential in an HTTP Authorization
          header
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/RoleDefinition"
        "401":
          description: Unauthorized
    put:
      tags:
      - Tenants Resource Permissions
      summary: Update role permission of a tenant resource
      operationId: updateRolePermissions
      parameters:
      - name: tenantId
        in: path
        required: true
        schema:
          type: string
      - name: resourceId
        in: path
        description: Resource Id. Not name
        required: true
        schema:
          type: string
      - name: scopeId
        in: path
        description: Scope Id. Not the name
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: Valid access token as a Bearer credential in an HTTP Authorization
          header
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              uniqueItems: true
              type: array
              items:
                $ref: "#/components/schemas/RoleDefinition"
        required: true
      responses:
        "200":
          description: Ok
        "403":
          description: Forbidden
        "401":
          description: Unauthorized
  /admin/tenants/{tenantId}/resources/{resourceId}/scopes/{scopeId}/permissions/groups:
    get:
      tags:
      - Tenants Resource Permissions
      summary: List all group permissions of a tenant resources
      operationId: listGroupPermissions
      parameters:
      - name: tenantId
        in: path
        required: true
        schema:
          type: string
      - name: resourceId
        in: path
        description: Resource Id. Not name
        required: true
        schema:
          type: string
      - name: scopeId
        in: path
        description: Scope Id. Not the name
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: Valid access token as a Bearer credential in an HTTP Authorization
          header
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/GroupDefinition"
        "401":
          description: Unauthorized
    put:
      tags:
      - Tenants Resource Permissions
      summary: Update group permission of a tenant resource
      operationId: updateGroupPermissions
      parameters:
      - name: tenantId
        in: path
        required: true
        schema:
          type: string
      - name: resourceId
        in: path
        description: Resource Id. Not name
        required: true
        schema:
          type: string
      - name: scopeId
        in: path
        description: Scope Id. Not the name
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: Valid access token as a Bearer credential in an HTTP Authorization
          header
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              uniqueItems: true
              type: array
              items:
                $ref: "#/components/schemas/GroupDefinition"
        required: true
      responses:
        "200":
          description: Ok
        "403":
          description: Forbidden
        "401":
          description: Unauthorized
  /admin/tenants/{tenantId}/groups/{groupId}:
    get:
      tags:
      - Tenants Groups
      summary: Get group by id
      operationId: getTenantGroup
      parameters:
      - name: tenantId
        in: path
        required: true
        schema:
          type: string
      - name: groupId
        in: path
        description: Group id and not name
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: Valid access token as a Bearer credential in an HTTP Authorization
          header
        required: true
        schema:
          type: string
      responses:
        "401":
          description: Unauthorized
        "200":
          description: Ok
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GroupRepresentation"
    put:
      tags:
      - Tenants Groups
      summary: Update tenant group
      operationId: updateTenantGroup
      parameters:
      - name: tenantId
        in: path
        required: true
        schema:
          type: string
      - name: groupId
        in: path
        description: Group id and not name
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: Valid access token as a Bearer credential in an HTTP Authorization
          header
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GroupRepresentation"
        required: true
      responses:
        "200":
          description: Ok
        "403":
          description: Forbidden
        "401":
          description: Unauthorized
    delete:
      tags:
      - Tenants Groups
      summary: Delete group.
      operationId: deleteTenantGroup
      parameters:
      - name: tenantId
        in: path
        required: true
        schema:
          type: string
      - name: groupId
        in: path
        description: Group id and not name
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: Valid access token as a Bearer credential in an HTTP Authorization
          header
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Ok
        "403":
          description: Forbidden
        "401":
          description: Unauthorized
  /admin/users:
    get:
      tags:
      - Users
      summary: List users
      operationId: listUsers
      parameters:
      - name: search
        in: query
        description: "A String contained in username, first or last name, or email.\
          \ Default search behavior is prefix-based (e.g., foo or foo*). Use foo for\
          \ infix search and 'foo' for exact search."
        required: false
        schema:
          type: string
      - name: first
        in: query
        description: Pagination offset
        required: false
        schema:
          type: integer
          format: int32
      - name: max
        in: query
        description: Maximum results size (defaults to 100)
        required: false
        schema:
          type: integer
          format: int32
      - name: username
        in: query
        description: "A String contained in username, or the complete username, if\
          \ param 'exact' is true"
        required: false
        schema:
          type: string
      - name: firstName
        in: query
        description: "A String contained in firstname, or the complete firstname,\
          \ if param 'exact' is true"
        required: false
        schema:
          type: string
      - name: lastName
        in: query
        description: "A String contained in lastName, or the complete lastName, if\
          \ param 'exact' is true"
        required: false
        schema:
          type: string
      - name: email
        in: query
        description: "A String contained in email, or the complete email, if param\
          \ 'exact' is true"
        required: false
        schema:
          type: string
      - name: exact
        in: query
        description: "Boolean which defines whether the params 'firstname', 'lastname',\
          \ 'email' and 'username' must match exactly"
        required: false
        schema:
          type: string
      - name: Authorization
        in: header
        description: Valid access token as a Bearer credential in an HTTP Authorization
          header
        required: true
        schema:
          type: string
      responses:
        "401":
          description: Unauthorized
        "200":
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserRepresentation"
    post:
      tags:
      - Users
      summary: Create a new user Username must be unique.
      operationId: createUser
      parameters:
      - name: Authorization
        in: header
        description: Valid access token as a Bearer credential in an HTTP Authorization
          header
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserRepresentation"
        required: true
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                type: string
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
  /admin/tenants:
    get:
      tags:
      - Tenants
      summary: List tenants
      operationId: listTenants
      parameters:
      - name: search
        in: query
        description: Tenant name
        required: false
        schema:
          type: string
      - name: first
        in: query
        description: Pagination offset
        required: false
        schema:
          type: integer
          format: int32
      - name: max
        in: query
        description: Maximum results size (defaults to 100)
        required: false
        schema:
          type: integer
          format: int32
      - name: Authorization
        in: header
        description: Valid access token as a Bearer credential in an HTTP Authorization
          header
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/TenantRepresentation"
        "401":
          description: Unauthorized
    post:
      tags:
      - Tenants
      summary: Create a tenant.
      operationId: createTenant
      parameters:
      - name: Authorization
        in: header
        description: Valid access token as a Bearer credential in an HTTP Authorization
          header
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TenantRepresentation"
        required: true
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                type: string
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
  /admin/tenants/{tenantId}/users/{userId}/roles:
    get:
      tags:
      - Tenant Roles
      summary: List of roles assigned to user.
      operationId: listUserTenantRoles
      parameters:
      - name: tenantId
        in: path
        required: true
        schema:
          type: string
      - name: userId
        in: path
        description: UUID of user. Not the username
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: Valid access token as a Bearer credential in an HTTP Authorization
          header
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/RoleRepresentation"
        "401":
          description: Unauthorized
    post:
      tags:
      - Tenant Roles
      summary: Assign roles to user.
      operationId: assignUserWithTenantRoles
      parameters:
      - name: tenantId
        in: path
        required: true
        schema:
          type: string
      - name: userId
        in: path
        description: UUID of user. Not the username
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: Valid access token as a Bearer credential in an HTTP Authorization
          header
        required: true
        schema:
          type: string
      requestBody:
        description: Role name is required.
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/RoleRepresentation"
        required: true
      responses:
        "201":
          description: Created
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
    delete:
      tags:
      - Tenant Roles
      summary: Unassign roles from user.
      operationId: unassignUserWithTenantRoles
      parameters:
      - name: tenantId
        in: path
        required: true
        schema:
          type: string
      - name: userId
        in: path
        description: UUID of user. Not the username
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: Valid access token as a Bearer credential in an HTTP Authorization
          header
        required: true
        schema:
          type: string
      requestBody:
        description: Role name is required.
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/RoleRepresentation"
        required: true
      responses:
        "200":
          description: Ok
        "403":
          description: Forbidden
        "401":
          description: Unauthorized
  /admin/tenants/{tenantId}/tenant-admin/users/{userId}:
    post:
      tags:
      - Tenant administrator
      summary: Assign user as Tenant Admin.
      operationId: assignAsTenantAdmin
      parameters:
      - name: tenantId
        in: path
        required: true
        schema:
          type: string
      - name: userId
        in: path
        description: UUID of user. Not the username
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: Valid access token as a Bearer credential in an HTTP Authorization
          header
        required: true
        schema:
          type: string
      responses:
        "201":
          description: Created
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
    delete:
      tags:
      - Tenant administrator
      summary: Unassign user as Tenant Admin Role.
      operationId: unassignAsTenantAdmin
      parameters:
      - name: tenantId
        in: path
        required: true
        schema:
          type: string
      - name: userId
        in: path
        description: UUID of user. Not the username
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: Valid access token as a Bearer credential in an HTTP Authorization
          header
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Ok
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
  /admin/tenants/{tenantId}/scopes:
    get:
      tags:
      - Tenants Scopes
      summary: List all tenant scopes
      operationId: listTenantScopes
      parameters:
      - name: tenantId
        in: path
        required: true
        schema:
          type: string
      - name: name
        in: query
        description: Scope name
        required: false
        schema:
          type: string
      - name: scopeId
        in: query
        description: Scope Id
        required: false
        schema:
          type: string
      - name: first
        in: query
        description: Pagination offset
        required: false
        schema:
          type: integer
          format: int32
      - name: max
        in: query
        description: Maximum results size (defaults to 100)
        required: false
        schema:
          type: integer
          format: int32
      - name: Authorization
        in: header
        description: Valid access token as a Bearer credential in an HTTP Authorization
          header
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ScopeRepresentation"
        "401":
          description: Unauthorized
    post:
      tags:
      - Tenants Scopes
      summary: Create a tenant scope.
      operationId: createTenantScope
      parameters:
      - name: tenantId
        in: path
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: Valid access token as a Bearer credential in an HTTP Authorization
          header
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ScopeRepresentation"
        required: true
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                type: string
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
  /admin/tenants/{tenantId}/roles:
    get:
      tags:
      - Tenant Roles
      summary: List roles
      operationId: listTenantRoles
      parameters:
      - name: tenantId
        in: path
        required: true
        schema:
          type: string
      - name: search
        in: query
        description: Role name
        required: false
        schema:
          type: string
      - name: first
        in: query
        description: Pagination offset
        required: false
        schema:
          type: integer
          format: int32
      - name: max
        in: query
        description: Maximum results size (defaults to 100)
        required: false
        schema:
          type: integer
          format: int32
      - name: Authorization
        in: header
        description: Valid access token as a Bearer credential in an HTTP Authorization
          header
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/RoleRepresentation"
        "401":
          description: Unauthorized
    post:
      tags:
      - Tenant Roles
      summary: Create a Role.
      operationId: createTenantRole
      parameters:
      - name: tenantId
        in: path
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: Valid access token as a Bearer credential in an HTTP Authorization
          header
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RoleRepresentation"
        required: true
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                type: string
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
  /admin/tenants/{tenantId}/roles/{role-name}/users:
    get:
      tags:
      - Tenant Roles
      summary: List of users with the specified role name.
      operationId: listTenantRoleUsers
      parameters:
      - name: tenantId
        in: path
        required: true
        schema:
          type: string
      - name: role-name
        in: path
        description: Role name and not the role id
        required: true
        schema:
          type: string
      - name: first
        in: query
        description: Pagination offset
        required: false
        schema:
          type: integer
          format: int32
      - name: max
        in: query
        description: Maximum results size (defaults to 100)
        required: false
        schema:
          type: integer
          format: int32
      - name: Authorization
        in: header
        description: Valid access token as a Bearer credential in an HTTP Authorization
          header
        required: true
        schema:
          type: string
      responses:
        "401":
          description: Unauthorized
        "200":
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserRepresentation"
    post:
      tags:
      - Tenant Roles
      summary: Assign users with the specified role name.
      operationId: assignUsersWithTenantRole
      parameters:
      - name: tenantId
        in: path
        required: true
        schema:
          type: string
      - name: role-name
        in: path
        description: Role name and not the role id
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: Valid access token as a Bearer credential in an HTTP Authorization
          header
        required: true
        schema:
          type: string
      requestBody:
        description: Only userid is required.
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/UserRepresentation"
        required: true
      responses:
        "201":
          description: Created
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
    delete:
      tags:
      - Tenant Roles
      summary: Unassign users with the specified role name.
      operationId: unassignUsersWithTenantRole
      parameters:
      - name: tenantId
        in: path
        required: true
        schema:
          type: string
      - name: role-name
        in: path
        description: Role name and not the role id
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: Valid access token as a Bearer credential in an HTTP Authorization
          header
        required: true
        schema:
          type: string
      requestBody:
        description: Only userid is required.
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/UserRepresentation"
        required: true
      responses:
        "200":
          description: Ok
        "403":
          description: Forbidden
        "401":
          description: Unauthorized
  /admin/tenants/{tenantId}/resources:
    get:
      tags:
      - Tenants Resources
      summary: List all tenant resources
      operationId: listTenantResources
      parameters:
      - name: tenantId
        in: path
        required: true
        schema:
          type: string
      - name: name
        in: query
        description: Resource name
        required: false
        schema:
          type: string
      - name: type
        in: query
        description: Resource type
        required: false
        schema:
          type: string
      - name: exactName
        in: query
        description: Boolean which defines whether the 'name' must match exactly
        required: false
        schema:
          type: boolean
      - name: first
        in: query
        description: Pagination offset
        required: false
        schema:
          type: integer
          format: int32
      - name: max
        in: query
        description: Maximum results size (defaults to 100)
        required: false
        schema:
          type: integer
          format: int32
      - name: Authorization
        in: header
        description: Valid access token as a Bearer credential in an HTTP Authorization
          header
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ResourceRepresentation"
        "401":
          description: Unauthorized
    post:
      tags:
      - Tenants Resources
      summary: Create a tenant resource.
      operationId: createTenantResource
      parameters:
      - name: tenantId
        in: path
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: Valid access token as a Bearer credential in an HTTP Authorization
          header
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ResourceRepresentation"
        required: true
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                type: string
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
  /admin/tenants/{tenantId}/memberships/{userId}:
    post:
      tags:
      - Tenant Memberships
      summary: Create a tenant membership. Adding user to the tenant as member.
      operationId: createTenantMembership
      parameters:
      - name: tenantId
        in: path
        required: true
        schema:
          type: string
      - name: userId
        in: path
        description: UUID of user. Not the username
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: Valid access token as a Bearer credential in an HTTP Authorization
          header
        required: true
        schema:
          type: string
      responses:
        "201":
          description: Created
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
    delete:
      tags:
      - Tenant Memberships
      summary: Delete tenant membership. Remove user from the Tenant
      operationId: deleteTenantMembership
      parameters:
      - name: tenantId
        in: path
        required: true
        schema:
          type: string
      - name: userId
        in: path
        description: UUID of user. Not the username
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: Valid access token as a Bearer credential in an HTTP Authorization
          header
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Deleted
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
  /admin/tenants/{tenantId}/groups:
    get:
      tags:
      - Tenants Groups
      summary: List top level tenant groups
      operationId: listTenantGroups
      parameters:
      - name: tenantId
        in: path
        required: true
        schema:
          type: string
      - name: first
        in: query
        description: Pagination offset
        required: false
        schema:
          type: integer
          format: int32
      - name: max
        in: query
        description: Maximum results size (defaults to 100)
        required: false
        schema:
          type: integer
          format: int32
      - name: Authorization
        in: header
        description: Valid access token as a Bearer credential in an HTTP Authorization
          header
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/GroupRepresentation"
        "401":
          description: Unauthorized
    post:
      tags:
      - Tenants Groups
      summary: Create top level tenant group.
      operationId: createTenantGroups
      parameters:
      - name: tenantId
        in: path
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: Valid access token as a Bearer credential in an HTTP Authorization
          header
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GroupRepresentation"
        required: true
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                type: string
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
  /admin/tenants/{tenantId}/groups/{groupId}/roles:
    get:
      tags:
      - Tenants Groups
      summary: List group roles
      operationId: listTenantGroupRoles
      parameters:
      - name: tenantId
        in: path
        required: true
        schema:
          type: string
      - name: groupId
        in: path
        description: Group id and not name
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: Valid access token as a Bearer credential in an HTTP Authorization
          header
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/RoleRepresentation"
        "401":
          description: Unauthorized
    post:
      tags:
      - Tenants Groups
      summary: Assign roles to group.
      operationId: assignGroupWithTenantRoles
      parameters:
      - name: tenantId
        in: path
        required: true
        schema:
          type: string
      - name: groupId
        in: path
        description: Group id and not name
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: Valid access token as a Bearer credential in an HTTP Authorization
          header
        required: true
        schema:
          type: string
      requestBody:
        description: Role name is required.
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/RoleRepresentation"
        required: true
      responses:
        "201":
          description: Created
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
    delete:
      tags:
      - Tenants Groups
      summary: Unassign roles from group.
      operationId: unassignGroupWithTenantRoles
      parameters:
      - name: tenantId
        in: path
        required: true
        schema:
          type: string
      - name: groupId
        in: path
        description: Group id and not name
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: Valid access token as a Bearer credential in an HTTP Authorization
          header
        required: true
        schema:
          type: string
      requestBody:
        description: Role name is required.
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/RoleRepresentation"
        required: true
      responses:
        "200":
          description: Updated
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
  /admin/tenants/{tenantId}/groups/{groupId}/children:
    get:
      tags:
      - Tenants Groups
      summary: List group children
      operationId: listTenantGroupChildren
      parameters:
      - name: tenantId
        in: path
        required: true
        schema:
          type: string
      - name: groupId
        in: path
        description: Group id and not name
        required: true
        schema:
          type: string
      - name: first
        in: query
        description: Pagination offset
        required: false
        schema:
          type: integer
          format: int32
      - name: max
        in: query
        description: Maximum results size (defaults to 100)
        required: false
        schema:
          type: integer
          format: int32
      - name: Authorization
        in: header
        description: Valid access token as a Bearer credential in an HTTP Authorization
          header
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/GroupRepresentation"
        "401":
          description: Unauthorized
    post:
      tags:
      - Tenants Groups
      summary: Create child group in the group.
      operationId: createTenantGroupChildren
      parameters:
      - name: tenantId
        in: path
        required: true
        schema:
          type: string
      - name: groupId
        in: path
        description: Group id and not name
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: Valid access token as a Bearer credential in an HTTP Authorization
          header
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GroupRepresentation"
        required: true
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                type: string
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
  /admin/sys-admin/users/{userId}:
    post:
      tags:
      - System administrator
      summary: Assign user with System Admin Role.
      operationId: addSysAdmin
      parameters:
      - name: userId
        in: path
        description: UUID of user. Not the username
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: Valid access token as a Bearer credential in an HTTP Authorization
          header
        required: true
        schema:
          type: string
      responses:
        "201":
          description: Created
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
    delete:
      tags:
      - System administrator
      summary: Unassign user with System Admin Role
      operationId: removeSysAdmin
      parameters:
      - name: userId
        in: path
        description: UUID of user. Not the username
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: Valid access token as a Bearer credential in an HTTP Authorization
          header
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Ok
        "403":
          description: Forbidden
        "401":
          description: Unauthorized
  /admin/users/{userId}/tenants/memberships:
    get:
      tags:
      - Tenant Memberships
      summary: List memberships of the user
      operationId: listUserTenantMemberships
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: Valid access token as a Bearer credential in an HTTP Authorization
          header
        required: true
        schema:
          type: string
      responses:
        "401":
          description: Unauthorized
        "200":
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/TenantMembershipRepresentation"
  /admin/users/count:
    get:
      tags:
      - Users
      summary: Returns the number of users that match the given criteria.
      description: "It can be called in three different ways. 1. Don’t specify any\
        \ criteria and pass null. The number of all users within that realm will be\
        \ returned. <p> 2. If search is specified other criteria such as last will\
        \ be ignored even though you set them. The search string will be matched against\
        \ the first and last name, the username and the email of a user.</p> <p> 3. If\
        \ search is unspecified but any of last name, first name, email or username\
        \ those criteria are matched against their respective fields on a user entity.\
        \ Combined with a logical and. </p>"
      operationId: getUserCount
      parameters:
      - name: username
        in: query
        description: "A String contained in username, or the complete username, if\
          \ param 'exact' is true"
        required: false
        schema:
          type: string
      - name: firstName
        in: query
        description: "A String contained in firstname, or the complete firstname,\
          \ if param 'exact' is true"
        required: false
        schema:
          type: string
      - name: lastName
        in: query
        description: "A String contained in lastName, or the complete lastName, if\
          \ param 'exact' is true"
        required: false
        schema:
          type: string
      - name: email
        in: query
        description: "A String contained in email, or the complete email, if param\
          \ 'exact' is true"
        required: false
        schema:
          type: string
      - name: Authorization
        in: header
        description: Valid access token as a Bearer credential in an HTTP Authorization
          header
        required: true
        schema:
          type: string
      responses:
        "401":
          description: Unauthorized
        "200":
          description: Ok
          content:
            application/json:
              schema:
                type: integer
                format: int64
  /admin/tenants/{tenantId}:
    get:
      tags:
      - Tenants
      summary: Get tenant
      operationId: getTenant
      parameters:
      - name: tenantId
        in: path
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: Valid access token as a Bearer credential in an HTTP Authorization
          header
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TenantRepresentation"
        "401":
          description: Unauthorized
    delete:
      tags:
      - Tenants
      summary: Delete tenant.
      operationId: deleteTenant
      parameters:
      - name: tenantId
        in: path
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: Valid access token as a Bearer credential in an HTTP Authorization
          header
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Ok
        "403":
          description: Forbidden
        "401":
          description: Unauthorized
  /admin/tenants/{tenantId}/users/{userId}/roles/available:
    get:
      tags:
      - Tenant Roles
      summary: List of roles that can be assigned to user.
      operationId: listNonUserTenantRoles
      parameters:
      - name: tenantId
        in: path
        required: true
        schema:
          type: string
      - name: userId
        in: path
        description: UUID of user. Not the username
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: Valid access token as a Bearer credential in an HTTP Authorization
          header
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/RoleRepresentation"
        "401":
          description: Unauthorized
  /admin/tenants/{tenantId}/users/{userId}/resources/{resourceId}/scopes:
    get:
      tags:
      - Tenants User Permissions
      summary: List all access scope that user has on a tenant resources
      operationId: listUserScopePermissions
      parameters:
      - name: tenantId
        in: path
        required: true
        schema:
          type: string
      - name: userId
        in: path
        description: UUID of user. Not the username
        required: true
        schema:
          type: string
      - name: resourceId
        in: path
        description: Resource Id. Not name
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: Valid access token as a Bearer credential in an HTTP Authorization
          header
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ScopeRepresentation"
        "401":
          description: Unauthorized
  /admin/tenants/{tenantId}/users/{userId}/resources/{resourceId}/scopes/{scopeId}/evaluate:
    get:
      tags:
      - Tenants User Permissions
      summary: Verify if a user has access to a resource.
      operationId: verifyUserAccess
      parameters:
      - name: tenantId
        in: path
        required: true
        schema:
          type: string
      - name: userId
        in: path
        description: UUID of user. Not the username
        required: true
        schema:
          type: string
      - name: resourceId
        in: path
        description: Resource Id. Not name
        required: true
        schema:
          type: string
      - name: scopeId
        in: path
        description: Scope Id. Not the name
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: Valid access token as a Bearer credential in an HTTP Authorization
          header
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                type: string
        "401":
          description: Unauthorized
  /admin/tenants/{tenantId}/users/{userId}/groups:
    get:
      tags:
      - Tenants Groups
      summary: List user groups
      operationId: listUserTenantGroups
      parameters:
      - name: tenantId
        in: path
        required: true
        schema:
          type: string
      - name: userId
        in: path
        description: UUID of user. Not the username
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: Valid access token as a Bearer credential in an HTTP Authorization
          header
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/GroupRepresentation"
        "401":
          description: Unauthorized
  /admin/tenants/{tenantId}/tenant-admin/users:
    get:
      tags:
      - Tenant administrator
      summary: List all tenant administrators.
      operationId: listUsers_1
      parameters:
      - name: tenantId
        in: path
        required: true
        schema:
          type: string
      - name: first
        in: query
        description: Pagination offset
        required: false
        schema:
          type: integer
          format: int32
      - name: max
        in: query
        description: Maximum results size (defaults to 100)
        required: false
        schema:
          type: integer
          format: int32
      - name: Authorization
        in: header
        description: Valid access token as a Bearer credential in an HTTP Authorization
          header
        required: true
        schema:
          type: string
      responses:
        "401":
          description: Unauthorized
        "200":
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserRepresentation"
  /admin/tenants/{tenantId}/tenant-admin/users/count:
    get:
      tags:
      - Tenant administrator
      summary: Get the tenant administrators count.
      operationId: getUserCount_1
      parameters:
      - name: tenantId
        in: path
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: Valid access token as a Bearer credential in an HTTP Authorization
          header
        required: true
        schema:
          type: string
      responses:
        "401":
          description: Unauthorized
        "200":
          description: Ok
          content:
            application/json:
              schema:
                type: integer
                format: int64
  /admin/tenants/{tenantId}/scopes/{scopeId}/resources:
    get:
      tags:
      - Tenants Scopes
      summary: List tenant resources containing specified scopes.
      operationId: listTenantResourceScopes
      parameters:
      - name: tenantId
        in: path
        required: true
        schema:
          type: string
      - name: scopeId
        in: path
        description: Scope Id. Not name
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: Valid access token as a Bearer credential in an HTTP Authorization
          header
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ResourceRepresentation"
        "401":
          description: Unauthorized
  /admin/tenants/{tenantId}/roles/{role-name}/users/available:
    get:
      tags:
      - Tenant Roles
      summary: List of users that is not assigned with the specified role name.
      operationId: listNonTenantRoleUsers
      parameters:
      - name: tenantId
        in: path
        required: true
        schema:
          type: string
      - name: role-name
        in: path
        description: Role name and not the role id
        required: true
        schema:
          type: string
      - name: first
        in: query
        description: Pagination offset
        required: false
        schema:
          type: integer
          format: int32
      - name: max
        in: query
        description: Maximum results size (defaults to 100)
        required: false
        schema:
          type: integer
          format: int32
      - name: Authorization
        in: header
        description: Valid access token as a Bearer credential in an HTTP Authorization
          header
        required: true
        schema:
          type: string
      responses:
        "401":
          description: Unauthorized
        "200":
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserRepresentation"
  /admin/tenants/{tenantId}/resources/{resourceId}/scopes:
    get:
      tags:
      - Tenants Resources
      summary: List tenant resource scopes. Only name and ids are returned.
      operationId: listTenantResourceScopes_1
      parameters:
      - name: tenantId
        in: path
        required: true
        schema:
          type: string
      - name: resourceId
        in: path
        description: Resource Id. Not name
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: Valid access token as a Bearer credential in an HTTP Authorization
          header
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ScopeRepresentation"
        "401":
          description: Unauthorized
  /admin/tenants/{tenantId}/nonmemberships:
    get:
      tags:
      - Tenant Memberships
      summary: List nonmemberships
      operationId: listNonTenantMemberships
      parameters:
      - name: tenantId
        in: path
        required: true
        schema:
          type: string
      - name: search
        in: query
        description: Username
        required: false
        schema:
          type: string
      - name: first
        in: query
        description: Pagination offset
        required: false
        schema:
          type: integer
          format: int32
      - name: max
        in: query
        description: Maximum results size (defaults to 100)
        required: false
        schema:
          type: integer
          format: int32
      - name: Authorization
        in: header
        description: Valid access token as a Bearer credential in an HTTP Authorization
          header
        required: true
        schema:
          type: string
      responses:
        "401":
          description: Unauthorized
        "200":
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserRepresentation"
  /admin/tenants/{tenantId}/nonmemberships/count:
    get:
      tags:
      - Tenant Memberships
      summary: Returns the number of tenant nonmemberships.
      operationId: getNonTenantMembershipsCount
      parameters:
      - name: tenantId
        in: path
        required: true
        schema:
          type: string
      - name: search
        in: query
        description: Username
        required: false
        schema:
          type: string
      - name: Authorization
        in: header
        description: Valid access token as a Bearer credential in an HTTP Authorization
          header
        required: true
        schema:
          type: string
      responses:
        "401":
          description: Unauthorized
        "200":
          description: Ok
          content:
            application/json:
              schema:
                type: integer
                format: int64
  /admin/tenants/{tenantId}/memberships:
    get:
      tags:
      - Tenant Memberships
      summary: List memberships
      operationId: listTenantMemberships
      parameters:
      - name: tenantId
        in: path
        required: true
        schema:
          type: string
      - name: search
        in: query
        description: Member username
        required: false
        schema:
          type: string
      - name: first
        in: query
        description: Pagination offset
        required: false
        schema:
          type: integer
          format: int32
      - name: max
        in: query
        description: Maximum results size (defaults to 100)
        required: false
        schema:
          type: integer
          format: int32
      - name: Authorization
        in: header
        description: Valid access token as a Bearer credential in an HTTP Authorization
          header
        required: true
        schema:
          type: string
      responses:
        "401":
          description: Unauthorized
        "200":
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/TenantMembershipRepresentation"
  /admin/tenants/{tenantId}/memberships/count:
    get:
      tags:
      - Tenant Memberships
      summary: Returns the number of tenant memberships.
      operationId: getTenantMembershipsCount
      parameters:
      - name: tenantId
        in: path
        required: true
        schema:
          type: string
      - name: search
        in: query
        description: Member username
        required: false
        schema:
          type: string
      - name: Authorization
        in: header
        description: Valid access token as a Bearer credential in an HTTP Authorization
          header
        required: true
        schema:
          type: string
      responses:
        "401":
          description: Unauthorized
        "200":
          description: Ok
          content:
            application/json:
              schema:
                type: integer
                format: int64
  /admin/tenants/{tenantId}/groups/{groupId}/roles/available:
    get:
      tags:
      - Tenants Groups
      summary: List of roles that can be assigned to group.
      operationId: listNonTenantGroupRoles
      parameters:
      - name: tenantId
        in: path
        required: true
        schema:
          type: string
      - name: groupId
        in: path
        description: Group id and not name
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: Valid access token as a Bearer credential in an HTTP Authorization
          header
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/RoleRepresentation"
        "401":
          description: Unauthorized
  /admin/tenants/{tenantId}/groups/{groupId}/members:
    get:
      tags:
      - Tenants Groups
      summary: List users in group
      operationId: listTenantGroupMembers
      parameters:
      - name: tenantId
        in: path
        required: true
        schema:
          type: string
      - name: groupId
        in: path
        description: Group id and not name
        required: true
        schema:
          type: string
      - name: first
        in: query
        description: Pagination offset
        required: false
        schema:
          type: integer
          format: int32
      - name: max
        in: query
        description: Maximum results size (defaults to 100)
        required: false
        schema:
          type: integer
          format: int32
      - name: Authorization
        in: header
        description: Valid access token as a Bearer credential in an HTTP Authorization
          header
        required: true
        schema:
          type: string
      responses:
        "401":
          description: Unauthorized
        "200":
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserRepresentation"
  /admin/tenants/count:
    get:
      tags:
      - Tenants
      summary: Returns the number of tenant that match the given criteria.
      operationId: getTenantCount
      parameters:
      - name: search
        in: query
        description: Tenant name
        required: false
        schema:
          type: string
      - name: Authorization
        in: header
        description: Valid access token as a Bearer credential in an HTTP Authorization
          header
        required: true
        schema:
          type: string
      responses:
        "401":
          description: Unauthorized
        "200":
          description: Ok
          content:
            application/json:
              schema:
                type: integer
                format: int64
  /admin/sys-admin:
    get:
      tags:
      - System administrator
      summary: Get representation of the System Admin Role
      operationId: getRole
      parameters:
      - name: Authorization
        in: header
        description: Valid access token as a Bearer credential in an HTTP Authorization
          header
        required: true
        schema:
          type: string
      responses:
        "401":
          description: Unauthorized
        "200":
          description: Ok
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RoleRepresentation"
  /admin/sys-admin/users:
    get:
      tags:
      - System administrator
      summary: List users with system-admin role
      operationId: listUsers_2
      parameters:
      - name: first
        in: query
        description: Pagination offset
        required: false
        schema:
          type: integer
          format: int32
      - name: max
        in: query
        description: Maximum results size (defaults to 100)
        required: false
        schema:
          type: integer
          format: int32
      - name: Authorization
        in: header
        description: Valid access token as a Bearer credential in an HTTP Authorization
          header
        required: true
        schema:
          type: string
      responses:
        "401":
          description: Unauthorized
        "200":
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserRepresentation"
components:
  schemas:
    UserRepresentation:
      required:
      - email
      - firstName
      - lastName
      - username
      type: object
      properties:
        id:
          type: string
        username:
          maxLength: 255
          type: string
        firstName:
          maxLength: 255
          type: string
        lastName:
          maxLength: 255
          type: string
        email:
          maxLength: 255
          type: string
        enabled:
          type: boolean
        createdTimestamp:
          type: integer
          format: int64
        attributes:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
        emailVerified:
          type: boolean
    PasswordRepresentation:
      type: object
      properties:
        type:
          type: string
          readOnly: true
        value:
          type: string
        temporary:
          type: boolean
      description: Password representation
    ScopeRepresentation:
      type: object
      properties:
        id:
          type: string
          readOnly: true
        name:
          type: string
    RoleRepresentation:
      type: object
      properties:
        id:
          type: string
          readOnly: true
        name:
          type: string
        description:
          type: string
        clientRole:
          type: boolean
          readOnly: true
        containerId:
          type: string
          readOnly: true
    ResourceRepresentation:
      type: object
      properties:
        name:
          type: string
        type:
          type: string
        displayName:
          type: string
        _id:
          type: string
        scopes:
          uniqueItems: true
          type: array
          items:
            $ref: "#/components/schemas/ScopeRepresentation"
    RoleDefinition:
      type: object
      properties:
        id:
          type: string
        required:
          type: boolean
    GroupDefinition:
      type: object
      properties:
        id:
          type: string
        extendChildren:
          type: boolean
    GroupRepresentation:
      required:
      - name
      type: object
      properties:
        id:
          type: string
          readOnly: true
        name:
          maxLength: 255
          type: string
        parentId:
          type: string
        path:
          type: string
        subGroupCount:
          type: integer
          format: int64
    TenantRepresentation:
      required:
      - name
      type: object
      properties:
        id:
          type: string
          readOnly: true
        name:
          maxLength: 255
          type: string
        realm:
          type: string
          readOnly: true
      readOnly: true
    TenantMembershipRepresentation:
      required:
      - roles
      type: object
      properties:
        id:
          type: string
          readOnly: true
        user:
          $ref: "#/components/schemas/UserRepresentation"
        tenant:
          $ref: "#/components/schemas/TenantRepresentation"
        roles:
          uniqueItems: true
          type: array
          items:
            type: string
