"use strict";(self.webpackChunk_mssfoobar_docs=self.webpackChunk_mssfoobar_docs||[]).push([[9360],{99700:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>t,contentTitle:()=>c,default:()=>p,frontMatter:()=>l,metadata:()=>s,toc:()=>a});const s=JSON.parse('{"id":"modules/ucs/deployment/deployment","title":"Deployment","description":"Building Images","source":"@site/docs/modules/ucs/deployment/deployment.mdx","sourceDirName":"modules/ucs/deployment","slug":"/modules/ucs/deployment/","permalink":"/docs/docs/modules/ucs/deployment/","draft":false,"unlisted":false,"editUrl":"https://github.com/mssfoobar/docs/tree/main/docs/modules/ucs/deployment/deployment.mdx","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1,"sidebar_label":"Deployment"},"sidebar":"modulesSidebar","previous":{"title":"Configuration","permalink":"/docs/docs/modules/ucs/configuration/"},"next":{"title":"FAQ","permalink":"/docs/docs/modules/ucs/reference/faq"}}');var o=i(74848),r=i(28453);const l={sidebar_position:1,sidebar_label:"Deployment"},c="Deployment",t={},a=[{value:"Building Images",id:"building-images",level:2},{value:"Pushing to Container Registry",id:"pushing-to-container-registry",level:2},{value:"Deploy UCS in Docker Container",id:"deploy-ucs-in-docker-container",level:2},{value:"Deploy UCS in kubernetes",id:"deploy-ucs-in-kubernetes",level:2},{value:"Preparing Manifest Repo",id:"preparing-manifest-repo",level:3},{value:"Deploy Using ArgoCD",id:"deploy-using-argocd",level:3},{value:"Deploy Using kubectl",id:"deploy-using-kubectl",level:3},{value:"CI/CD Pipeline",id:"cicd-pipeline",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"deployment",children:"Deployment"})}),"\n",(0,o.jsx)(n.h2,{id:"building-images",children:"Building Images"}),"\n",(0,o.jsx)(n.p,{children:"Building all services in docker-compose file."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"docker-compose build\n"})}),"\n",(0,o.jsx)(n.p,{children:"Building a specific service."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"docker-compose build {service-name}\n"})}),"\n",(0,o.jsxs)(n.admonition,{type:"warning",children:[(0,o.jsx)(n.p,{children:"It is important to build the image following below naming convention.\nOtherwise, pushing to ghcr will fail."}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"ghcr.io/NAMESPACE/IMAGE_NAME:tag\n"})}),(0,o.jsx)(n.p,{children:"NAMESPACE must be personal account or organization to which the image will be scoped to."})]}),"\n",(0,o.jsx)(n.h2,{id:"pushing-to-container-registry",children:"Pushing to Container Registry"}),"\n",(0,o.jsx)(n.p,{children:"This project used ghcr (GitHub container registry) to store images."}),"\n",(0,o.jsx)(n.p,{children:"Working with ghcr"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["create a new GitHub personal access token with at least ",(0,o.jsx)(n.code,{children:"write:pacakges"})," access."]}),"\n",(0,o.jsx)(n.li,{children:"login to ghcr using cli."}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"export CR_PAT=YOUR_TOKEN\necho $CR_PAT | docker login ghcr.io -u USERNAME --password-stdin\n"})}),"\n",(0,o.jsxs)(n.ol,{start:"3",children:["\n",(0,o.jsx)(n.li,{children:"push"}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"docker push ghcr.io/NAMESPACE/IMAGE_NAME:latest\n"})}),"\n",(0,o.jsxs)(n.p,{children:["For more details, refer to GitHub official ",(0,o.jsx)(n.a,{href:"https://docs.github.com/en/packages/working-with-a-github-packages-registry/working-with-the-container-registry",children:"documents"})]}),"\n",(0,o.jsx)(n.h2,{id:"deploy-ucs-in-docker-container",children:"Deploy UCS in Docker Container"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"docker-compose up -d --remove-orphans\n"})}),"\n",(0,o.jsxs)(n.admonition,{type:"info",children:[(0,o.jsxs)(n.p,{children:["UCS services use both ",(0,o.jsx)(n.code,{children:".env"})," and ",(0,o.jsx)(n.code,{children:".toml"}),"."]}),(0,o.jsx)(n.p,{children:".env is used for passing secret keys and .toml is for configuration."})]}),"\n",(0,o.jsx)(n.p,{children:"Configuring docker-compose file."}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Set env variable"}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"    environment:\n      - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY}\n      - MINIO_SECRET_KEY=${MINIO_SECRET_KEY}\n      - POSTGRESQL_USER=${POSTGRESQL_USER}\n      - POSTGRESQL_PASSWORD=${POSTGRESQL_PASSWORD}\n"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Set toml config file location"}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:'    volumes:\n      - "./configs/docker/app-room-mgmt.toml:/configs/app-room-mgmt.toml"\n'})}),"\n",(0,o.jsx)(n.h2,{id:"deploy-ucs-in-kubernetes",children:"Deploy UCS in kubernetes"}),"\n",(0,o.jsx)(n.h3,{id:"preparing-manifest-repo",children:"Preparing Manifest Repo"}),"\n",(0,o.jsx)(n.p,{children:"Create a new repository with below directory for UCS services."}),"\n",(0,o.jsx)(n.p,{children:"Create three yaml files for each UCS service."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:".\n\u2514\u2500\u2500 manifests\n    \u251c\u2500\u2500 {service-name}-config.yaml\n    \u251c\u2500\u2500 {service-name}-deployment.yaml\n    \u251c\u2500\u2500 {service-name}-service.yaml\n"})}),"\n",(0,o.jsx)(n.p,{children:"For detail explanation of yaml files, refer to official documents for:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"https://kubernetes.io/docs/concepts/workloads/controllers/deployment/",children:"deployment.yaml"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"https://kubernetes.io/docs/concepts/services-networking/service/",children:"service.yaml"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"https://kubernetes.io/docs/concepts/configuration/configmap/",children:"config.yaml"})}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"You can use kompose to easily convert from docker-compose.yaml into deployment.yaml & service.yaml."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"kompose convert -f docker-compose.yaml\n"})}),"\n",(0,o.jsx)(n.p,{children:"config.yaml is to load ucs config .toml into deployment."}),"\n",(0,o.jsx)(n.p,{children:"Example config.yaml."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:'apiVersion: v1\nkind: ConfigMap\nmetadata:\n  creationTimestamp: null\n  name: app-room-mgmt-config\n  namespace: common-ucs\ndata:\n  app-room-mgmt.toml: |\n    [log]\n    level = "info"\n    ...\n'})}),"\n",(0,o.jsx)(n.p,{children:"And mount the config.yaml in deployment.yaml volumes."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"apiVersion: apps/v1\nkind: Deployment\nspec:\n  template:\n    spec:\n      volumes:\n        - name: app-room-mgmt-claim0\n          configMap:\n            name: app-room-mgmt-config\n\n"})}),"\n",(0,o.jsx)(n.h3,{id:"deploy-using-argocd",children:"Deploy Using ArgoCD"}),"\n",(0,o.jsx)(n.p,{children:"If ArgoCD is set up for kubernetes deployment, you just have to create entrypoint for ArgoCD to find the manifest repo."}),"\n",(0,o.jsx)(n.p,{children:"Create a yaml inside the repo where ArgoCD will look for entrypoint."}),"\n",(0,o.jsx)(n.p,{children:"Make sure to provide the repoURL and path of manifest repo."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"apiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  name: ucs\n  namespace: argocd\n  finalizers:\n  - resources-finalizer.argocd.argoproj.io\nspec:\n  destination:\n    namespace: common-ucs\n    name: in-cluster\n  project: appbundle-project-ar2-dev\n  source:\n    path: manifests\n    repoURL: https://github.com/example/ucs\n    targetRevision: main\n  syncPolicy:\n    syncOptions:\n    - CreateNamespace=true\n    automated:\n      prune: true\n      allowEmpty: true\n      selfHeal: true\n"})}),"\n",(0,o.jsx)(n.p,{children:"Check if the Deployment was created using ArgoCD dashboard."}),"\n",(0,o.jsx)(n.h3,{id:"deploy-using-kubectl",children:"Deploy Using kubectl"}),"\n",(0,o.jsx)(n.p,{children:"Before you begin, make sure your Kubernetes cluster is up and running. Follow the steps given below to create the above Deployment:"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsx)(n.li,{children:"Create the Deployment by running the following command:"}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"kubectl apply -f https://github.com/example/ucs/manifest/app-room-mgmt-deployment.yaml\n"})}),"\n",(0,o.jsxs)(n.ol,{start:"2",children:["\n",(0,o.jsxs)(n.li,{children:["Run ",(0,o.jsx)(n.code,{children:"kubectl get deployments"})," to check if the Deployment was created."]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"cicd-pipeline",children:"CI/CD Pipeline"}),"\n",(0,o.jsx)(n.p,{children:"Every commit to main branch will trigger the GitHub action workflow."}),"\n",(0,o.jsx)(n.p,{children:"Following actions will be triggered by workflow -"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"build & push the images into ghcr (GitHub container registry)"}),"\n",(0,o.jsx)(n.li,{children:"update the image tags in manifest files of staging server"}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"Upon the update of manifest files, ArgoCD will pick up new images' tag to deploy latest services."}),"\n",(0,o.jsxs)(n.p,{children:["Refer to ",(0,o.jsx)(n.code,{children:"publish.yml"})," inside ",(0,o.jsx)(n.code,{children:".github/workflows"})," for more details."]})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},28453:(e,n,i)=>{i.d(n,{R:()=>l,x:()=>c});var s=i(96540);const o={},r=s.createContext(o);function l(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:l(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);