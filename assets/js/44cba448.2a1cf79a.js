"use strict";(self.webpackChunk_mssfoobar_docs=self.webpackChunk_mssfoobar_docs||[]).push([[5811],{26537:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>h,frontMatter:()=>l,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"contributing/language-specific/golang","title":"Go","description":"-   Introduction","source":"@site/docs/contributing/language-specific/golang.md","sourceDirName":"contributing/language-specific","slug":"/contributing/language-specific/golang","permalink":"/docs/docs/contributing/language-specific/golang","draft":false,"unlisted":false,"editUrl":"https://github.com/mssfoobar/docs/tree/main/docs/contributing/language-specific/golang.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1,"sidebar_label":"Golang"},"sidebar":"contributingSidebar","previous":{"title":"Known Issues","permalink":"/docs/docs/contributing/documentation/reference/known-issues"}}');var i=r(74848),t=r(28453);const l={sidebar_position:1,sidebar_label:"Golang"},a="Go",o={},d=[{value:"Introduction",id:"introduction",level:2},{value:"Guidelines",id:"guidelines",level:2},{value:"Pointers to Interfaces",id:"pointers-to-interfaces",level:3},{value:"Verify Interface Compliance",id:"verify-interface-compliance",level:3},{value:"Receivers and Interfaces",id:"receivers-and-interfaces",level:3},{value:"Zero-value Mutexes are Valid",id:"zero-value-mutexes-are-valid",level:3},{value:"Copy Slices and Maps at Boundaries",id:"copy-slices-and-maps-at-boundaries",level:3},{value:"Receiving Slices and Maps",id:"receiving-slices-and-maps",level:4},{value:"Returning Slices and Maps",id:"returning-slices-and-maps",level:4},{value:"Defer to Clean Up",id:"defer-to-clean-up",level:3},{value:"Channel Size is One or None",id:"channel-size-is-one-or-none",level:3},{value:"Start Enums at One",id:"start-enums-at-one",level:3},{value:"Use <code>&quot;time&quot;</code> to handle time",id:"use-time-to-handle-time",level:3},{value:"Use <code>time.Time</code> for instants of time",id:"use-timetime-for-instants-of-time",level:4},{value:"Use <code>time.Duration</code> for periods of time",id:"use-timeduration-for-periods-of-time",level:4},{value:"Use <code>time.Time</code> and <code>time.Duration</code> with external systems",id:"use-timetime-and-timeduration-with-external-systems",level:4},{value:"Errors",id:"errors",level:3},{value:"Error Types",id:"error-types",level:4},{value:"Error Wrapping",id:"error-wrapping",level:4},{value:"Error Naming",id:"error-naming",level:4},{value:"Handle Errors Once",id:"handle-errors-once",level:4},{value:"Handle Type Assertion Failures",id:"handle-type-assertion-failures",level:3},{value:"Don&#39;t Panic",id:"dont-panic",level:3},{value:"Avoid Mutable Globals",id:"avoid-mutable-globals",level:3},{value:"Avoid Embedding Types in Public Structs",id:"avoid-embedding-types-in-public-structs",level:3},{value:"Avoid Using Built-In Names",id:"avoid-using-built-in-names",level:3},{value:"Avoid <code>init()</code>",id:"avoid-init",level:3},{value:"Exit in Main",id:"exit-in-main",level:3},{value:"Exit Once",id:"exit-once",level:4},{value:"Use field tags in marshaled structs",id:"use-field-tags-in-marshaled-structs",level:3},{value:"Don&#39;t fire-and-forget goroutines",id:"dont-fire-and-forget-goroutines",level:3},{value:"Wait for goroutines to exit",id:"wait-for-goroutines-to-exit",level:4},{value:"No goroutines in <code>init()</code>",id:"no-goroutines-in-init",level:4},{value:"Performance",id:"performance",level:2},{value:"Prefer strconv over fmt",id:"prefer-strconv-over-fmt",level:3},{value:"Avoid repeated string-to-byte conversions",id:"avoid-repeated-string-to-byte-conversions",level:3},{value:"Prefer Specifying Container Capacity",id:"prefer-specifying-container-capacity",level:3},{value:"Specifying Map Capacity Hints",id:"specifying-map-capacity-hints",level:4},{value:"Specifying Slice Capacity",id:"specifying-slice-capacity",level:4},{value:"Style",id:"style",level:2},{value:"Avoid overly long lines",id:"avoid-overly-long-lines",level:3},{value:"Be Consistent",id:"be-consistent",level:3},{value:"Group Similar Declarations",id:"group-similar-declarations",level:3},{value:"Import Group Ordering",id:"import-group-ordering",level:3},{value:"Package Names",id:"package-names",level:3},{value:"Function Names",id:"function-names",level:3},{value:"Import Aliasing",id:"import-aliasing",level:3},{value:"Function Grouping and Ordering",id:"function-grouping-and-ordering",level:3},{value:"Reduce Nesting",id:"reduce-nesting",level:3},{value:"Unnecessary Else",id:"unnecessary-else",level:3},{value:"Top-level Variable Declarations",id:"top-level-variable-declarations",level:3},{value:"Prefix Unexported Globals with _",id:"prefix-unexported-globals-with-_",level:3},{value:"Embedding in Structs",id:"embedding-in-structs",level:3},{value:"Local Variable Declarations",id:"local-variable-declarations",level:3},{value:"nil is a valid slice",id:"nil-is-a-valid-slice",level:3},{value:"Reduce Scope of Variables",id:"reduce-scope-of-variables",level:3},{value:"Use Raw String Literals to Avoid Escaping",id:"use-raw-string-literals-to-avoid-escaping",level:3},{value:"Initializing Structs",id:"initializing-structs",level:3},{value:"Use Field Names to Initialize Structs",id:"use-field-names-to-initialize-structs",level:4},{value:"Omit Zero Value Fields in Structs",id:"omit-zero-value-fields-in-structs",level:4},{value:"Use <code>var</code> for Zero Value Structs",id:"use-var-for-zero-value-structs",level:4},{value:"Initializing Struct References",id:"initializing-struct-references",level:4},{value:"Initializing Maps",id:"initializing-maps",level:3},{value:"Format Strings outside Printf",id:"format-strings-outside-printf",level:3},{value:"Naming Printf-style Functions",id:"naming-printf-style-functions",level:3},{value:"Patterns",id:"patterns",level:2},{value:"Test Tables",id:"test-tables",level:3},{value:"Avoid Unnecessary Complexity in Table Tests",id:"avoid-unnecessary-complexity-in-table-tests",level:4},{value:"Parallel Tests",id:"parallel-tests",level:4},{value:"Functional Options",id:"functional-options",level:3},{value:"Linting",id:"linting",level:2},{value:"Lint Runners",id:"lint-runners",level:3}];function c(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"go",children:"Go"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#introduction",children:"Introduction"})}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"#guidelines",children:"Guidelines"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#pointers-to-interfaces",children:"Pointers to Interfaces"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#verify-interface-compliance",children:"Verify Interface Compliance"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#receivers-and-interfaces",children:"Receivers and Interfaces"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#zero-value-mutexes-are-valid",children:"Zero-value Mutexes are Valid"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#copy-slices-and-maps-at-boundaries",children:"Copy Slices and Maps at Boundaries"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#defer-to-clean-up",children:"Defer to Clean Up"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#channel-size-is-one-or-none",children:"Channel Size is One or None"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#start-enums-at-one",children:"Start Enums at One"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsxs)(n.a,{href:"#use-time-to-handle-time",children:["Use ",(0,i.jsx)(n.code,{children:'"time"'})," to handle time"]})}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"#errors",children:"Errors"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#error-types",children:"Error Types"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#error-wrapping",children:"Error Wrapping"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#error-naming",children:"Error Naming"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#handle-errors-once",children:"Handle Errors Once"})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#handle-type-assertion-failures",children:"Handle Type Assertion Failures"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#dont-panic",children:"Don't Panic"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#avoid-mutable-globals",children:"Avoid Mutable Globals"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#avoid-embedding-types-in-public-structs",children:"Avoid Embedding Types in Public Structs"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#avoid-using-built-in-names",children:"Avoid Using Built-In Names"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsxs)(n.a,{href:"#avoid-init",children:["Avoid ",(0,i.jsx)(n.code,{children:"init()"})]})}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"#exit-in-main",children:"Exit in Main"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#exit-once",children:"Exit Once"})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#use-field-tags-in-marshaled-structs",children:"Use field tags in marshaled structs"})}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"#dont-fire-and-forget-goroutines",children:"Don't fire-and-forget goroutines"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#wait-for-goroutines-to-exit",children:"Wait for goroutines to exit"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsxs)(n.a,{href:"#no-goroutines-in-init",children:["No goroutines in ",(0,i.jsx)(n.code,{children:"init()"})]})}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"#performance",children:"Performance"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#prefer-strconv-over-fmt",children:"Prefer strconv over fmt"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#avoid-repeated-string-to-byte-conversions",children:"Avoid repeated string-to-byte conversions"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#prefer-specifying-container-capacity",children:"Prefer Specifying Container Capacity"})}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"#style",children:"Style"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#avoid-overly-long-lines",children:"Avoid overly long lines"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#be-consistent",children:"Be Consistent"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#group-similar-declarations",children:"Group Similar Declarations"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#import-group-ordering",children:"Import Group Ordering"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#package-names",children:"Package Names"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#function-names",children:"Function Names"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#import-aliasing",children:"Import Aliasing"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#function-grouping-and-ordering",children:"Function Grouping and Ordering"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#reduce-nesting",children:"Reduce Nesting"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#unnecessary-else",children:"Unnecessary Else"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#top-level-variable-declarations",children:"Top-level Variable Declarations"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#prefix-unexported-globals-with-_",children:"Prefix Unexported Globals with _"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#embedding-in-structs",children:"Embedding in Structs"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#local-variable-declarations",children:"Local Variable Declarations"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#nil-is-a-valid-slice",children:"nil is a valid slice"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#reduce-scope-of-variables",children:"Reduce Scope of Variables"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#use-raw-string-literals-to-avoid-escaping",children:"Use Raw String Literals to Avoid Escaping"})}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"#initializing-structs",children:"Initializing Structs"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#use-field-names-to-initialize-structs",children:"Use Field Names to Initialize Structs"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#omit-zero-value-fields-in-structs",children:"Omit Zero Value Fields in Structs"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsxs)(n.a,{href:"#use-var-for-zero-value-structs",children:["Use ",(0,i.jsx)(n.code,{children:"var"})," for Zero Value Structs"]})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#initializing-struct-references",children:"Initializing Struct References"})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#initializing-maps",children:"Initializing Maps"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#format-strings-outside-printf",children:"Format Strings outside Printf"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#naming-printf-style-functions",children:"Naming Printf-style Functions"})}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"#patterns",children:"Patterns"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#test-tables",children:"Test Tables"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#functional-options",children:"Functional Options"})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#linting",children:"Linting"})}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,i.jsx)(n.p,{children:"The goal of this guide is to help us ensure the code we write is clear, readable and idiomatic Go code."}),"\n",(0,i.jsx)(n.p,{children:"We follow the official Go Coding guidelines by Google"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://go.dev/doc/effective_go",children:"https://go.dev/doc/effective_go"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://google.github.io/styleguide/go/",children:"https://google.github.io/styleguide/go/"})}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"In addition to official guidelines, we created the list of conventions that are specific to AOH."}),"\n",(0,i.jsxs)(n.p,{children:["This coding guide is inspired from the Uber Go style guide at ",(0,i.jsx)(n.a,{href:"https://github.com/uber-go/guide/blob/master/style.md",children:"https://github.com/uber-go/guide/blob/master/style.md"}),",\nwith modifications specific to AOH."]}),"\n",(0,i.jsx)(n.h2,{id:"guidelines",children:"Guidelines"}),"\n",(0,i.jsx)(n.h3,{id:"pointers-to-interfaces",children:"Pointers to Interfaces"}),"\n",(0,i.jsx)(n.p,{children:"You almost never need a pointer to an interface. You should be passing interfaces as values\u2014the underlying data can\nstill be a pointer."}),"\n",(0,i.jsx)(n.p,{children:"An interface is two fields:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:'A pointer to some type-specific information. You can think of this as "type."'}),"\n",(0,i.jsx)(n.li,{children:"Data pointer. If the data stored is a pointer, it\u2019s stored directly. If the data stored is a value, then a pointer to\nthe value is stored."}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"If you want interface methods to modify the underlying data, you must use a pointer."}),"\n",(0,i.jsx)(n.h3,{id:"verify-interface-compliance",children:"Verify Interface Compliance"}),"\n",(0,i.jsx)(n.p,{children:"Verify interface compliance at compile time where appropriate. This includes:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Exported types that are required to implement specific interfaces as part of their API contract"}),"\n",(0,i.jsx)(n.li,{children:"Exported or unexported types that are part of a collection of types implementing the same interface"}),"\n",(0,i.jsx)(n.li,{children:"Other cases where violating an interface would break users"}),"\n"]}),"\n",(0,i.jsxs)("table",{children:[(0,i.jsx)("thead",{children:(0,i.jsxs)("tr",{children:[(0,i.jsx)("th",{children:"Bad"}),(0,i.jsx)("th",{children:"Good"})]})}),(0,i.jsx)("tbody",{children:(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"type Handler struct {\n  // ...\n}\n\n\n\nfunc (h *Handler) ServeHTTP(\n  w http.ResponseWriter,\n  r *http.Request,\n) {\n  ...\n}\n"})})}),(0,i.jsx)("td",{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"type Handler struct {\n  // ...\n}\n\nvar _ http.Handler = (*Handler)(nil)\n\nfunc (h *Handler) ServeHTTP(\n  w http.ResponseWriter,\n  r *http.Request,\n) {\n  // ...\n}\n"})})})]})})]}),"\n",(0,i.jsxs)(n.p,{children:["The statement ",(0,i.jsx)(n.code,{children:"var _ http.Handler = (*Handler)(nil)"})," will fail to compile if ",(0,i.jsx)(n.code,{children:"*Handler"})," ever stops matching the\n",(0,i.jsx)(n.code,{children:"http.Handler"})," interface."]}),"\n",(0,i.jsxs)(n.p,{children:["The right hand side of the assignment should be the zero value of the asserted type. This is ",(0,i.jsx)(n.code,{children:"nil"})," for pointer\ntypes (like ",(0,i.jsx)(n.code,{children:"*Handler"}),"), slices, and maps, and an empty struct for struct types."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"type LogHandler struct {\n  h   http.Handler\n  log *zap.Logger\n}\n\nvar _ http.Handler = LogHandler{}\n\nfunc (h LogHandler) ServeHTTP(\n  w http.ResponseWriter,\n  r *http.Request,\n) {\n  // ...\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"receivers-and-interfaces",children:"Receivers and Interfaces"}),"\n",(0,i.jsxs)(n.p,{children:["Methods with value receivers can be called on pointers as well as values.\nMethods with pointer receivers can only be called on pointers or ",(0,i.jsx)(n.a,{href:"https://go.dev/ref/spec#Method_values",children:"addressable values"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"For example,"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'type S struct {\n  data string\n}\n\nfunc (s S) Read() string {\n  return s.data\n}\n\nfunc (s *S) Write(str string) {\n  s.data = str\n}\n\n// We cannot get pointers to values stored in maps, because they are not\n// addressable values.\nsVals := map[int]S{1: {"A"}}\n\n// We can call Read on values stored in the map because Read\n// has a value receiver, which does not require the value to\n// be addressable.\nsVals[1].Read()\n\n// We cannot call Write on values stored in the map because Write\n// has a pointer receiver, and it\'s not possible to get a pointer\n// to a value stored in a map.\n//\n//  sVals[1].Write("test")\n\nsPtrs := map[int]*S{1: {"A"}}\n\n// You can call both Read and Write if the map stores pointers,\n// because pointers are intrinsically addressable.\nsPtrs[1].Read()\nsPtrs[1].Write("test")\n'})}),"\n",(0,i.jsx)(n.p,{children:"Similarly, an interface can be satisfied by a pointer, even if the method has a value receiver."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"type F interface {\n  f()\n}\n\ntype S1 struct{}\n\nfunc (s S1) f() {}\n\ntype S2 struct{}\n\nfunc (s *S2) f() {}\n\ns1Val := S1{}\ns1Ptr := &S1{}\ns2Val := S2{}\ns2Ptr := &S2{}\n\nvar i F\ni = s1Val\ni = s1Ptr\ni = s2Ptr\n\n// The following doesn't compile, since s2Val is a value, and there is no value receiver for f.\n//   i = s2Val\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Effective Go has a good write up on ",(0,i.jsx)(n.a,{href:"https://go.dev/doc/effective_go#pointers_vs_values",children:"Pointers vs. Values"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"zero-value-mutexes-are-valid",children:"Zero-value Mutexes are Valid"}),"\n",(0,i.jsxs)(n.p,{children:["The zero-value of ",(0,i.jsx)(n.code,{children:"sync.Mutex"})," and ",(0,i.jsx)(n.code,{children:"sync.RWMutex"})," is valid, so you almost never need a pointer to a mutex."]}),"\n",(0,i.jsxs)("table",{children:[(0,i.jsx)("thead",{children:(0,i.jsxs)("tr",{children:[(0,i.jsx)("th",{children:"Bad"}),(0,i.jsx)("th",{children:"Good"})]})}),(0,i.jsx)("tbody",{children:(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"mu := new(sync.Mutex)\nmu.Lock()\n"})})}),(0,i.jsx)("td",{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"var mu sync.Mutex\nmu.Lock()\n"})})})]})})]}),"\n",(0,i.jsx)(n.p,{children:"If you use a struct by pointer, then the mutex should be a non-pointer field on it. Do not embed the mutex on the\nstruct, even if the struct is not exported."}),"\n",(0,i.jsxs)("table",{children:[(0,i.jsx)("thead",{children:(0,i.jsxs)("tr",{children:[(0,i.jsx)("th",{children:"Bad"}),(0,i.jsx)("th",{children:"Good"})]})}),(0,i.jsxs)("tbody",{children:[(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"type SMap struct {\n  sync.Mutex\n\n  data map[string]string\n}\n\nfunc NewSMap() *SMap {\n  return &SMap{\n    data: make(map[string]string),\n  }\n}\n\nfunc (m *SMap) Get(k string) string {\n  m.Lock()\n  defer m.Unlock()\n\n  return m.data[k]\n}\n"})})}),(0,i.jsx)("td",{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"type SMap struct {\n  mu sync.Mutex\n\n  data map[string]string\n}\n\nfunc NewSMap() *SMap {\n  return &SMap{\n    data: make(map[string]string),\n  }\n}\n\nfunc (m *SMap) Get(k string) string {\n  m.mu.Lock()\n  defer m.mu.Unlock()\n\n  return m.data[k]\n}\n"})})})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"Mutex"})," field, and the ",(0,i.jsx)(n.code,{children:"Lock"})," and ",(0,i.jsx)(n.code,{children:"Unlock"})," methods are unintentionally part of the exported API of ",(0,i.jsx)(n.code,{children:"SMap"}),"."]})}),(0,i.jsx)("td",{children:(0,i.jsxs)(n.p,{children:["The mutex and its methods are implementation details of ",(0,i.jsx)(n.code,{children:"SMap"})," hidden from its callers."]})})]})]})]}),"\n",(0,i.jsx)(n.h3,{id:"copy-slices-and-maps-at-boundaries",children:"Copy Slices and Maps at Boundaries"}),"\n",(0,i.jsx)(n.p,{children:"Slices and maps contain pointers to the underlying data so be wary of scenarios when they need to be copied."}),"\n",(0,i.jsx)(n.h4,{id:"receiving-slices-and-maps",children:"Receiving Slices and Maps"}),"\n",(0,i.jsx)(n.p,{children:"Keep in mind that users can modify a map or slice you received as an argument if you store a reference to it."}),"\n",(0,i.jsxs)("table",{children:[(0,i.jsx)("thead",{children:(0,i.jsxs)("tr",{children:[(0,i.jsx)("th",{children:"Bad"})," ",(0,i.jsx)("th",{children:"Good"})]})}),(0,i.jsx)("tbody",{children:(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"func (d *Driver) SetTrips(trips []Trip) {\n  d.trips = trips\n}\n\ntrips := ...\nd1.SetTrips(trips)\n\n// Did you mean to modify d1.trips?\ntrips[0] = ...\n"})})}),(0,i.jsx)("td",{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"func (d *Driver) SetTrips(trips []Trip) {\n  d.trips = make([]Trip, len(trips))\n  copy(d.trips, trips)\n}\n\ntrips := ...\nd1.SetTrips(trips)\n\n// We can now modify trips[0] without affecting d1.trips.\ntrips[0] = ...\n"})})})]})})]}),"\n",(0,i.jsx)(n.h4,{id:"returning-slices-and-maps",children:"Returning Slices and Maps"}),"\n",(0,i.jsx)(n.p,{children:"Similarly, be wary of user modifications to maps or slices exposing internal\nstate."}),"\n",(0,i.jsxs)("table",{children:[(0,i.jsx)("thead",{children:(0,i.jsxs)("tr",{children:[(0,i.jsx)("th",{children:"Bad"}),(0,i.jsx)("th",{children:"Good"})]})}),(0,i.jsx)("tbody",{children:(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"type Stats struct {\n  mu sync.Mutex\n  counters map[string]int\n}\n\n// Snapshot returns the current stats.\nfunc (s *Stats) Snapshot() map[string]int {\n  s.mu.Lock()\n  defer s.mu.Unlock()\n\n  return s.counters\n}\n\n// snapshot is no longer protected by the mutex, so any\n// access to the snapshot is subject to data races.\nsnapshot := stats.Snapshot()\n"})})}),(0,i.jsx)("td",{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"type Stats struct {\n  mu sync.Mutex\n  counters map[string]int\n}\n\nfunc (s *Stats) Snapshot() map[string]int {\n  s.mu.Lock()\n  defer s.mu.Unlock()\n\n  result := make(map[string]int, len(s.counters))\n  for k, v := range s.counters {\n    result[k] = v\n  }\n  return result\n}\n\n// Snapshot is now a copy.\nsnapshot := stats.Snapshot()\n"})})})]})})]}),"\n",(0,i.jsx)(n.h3,{id:"defer-to-clean-up",children:"Defer to Clean Up"}),"\n",(0,i.jsx)(n.p,{children:"Use defer to clean up resources such as files and locks."}),"\n",(0,i.jsxs)("table",{children:[(0,i.jsx)("thead",{children:(0,i.jsxs)("tr",{children:[(0,i.jsx)("th",{children:"Bad"}),(0,i.jsx)("th",{children:"Good"})]})}),(0,i.jsx)("tbody",{children:(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"p.Lock()\nif p.count < 10 {\n  p.Unlock()\n  return p.count\n}\n\np.count++\nnewCount := p.count\np.Unlock()\n\nreturn newCount\n\n// easy to miss unlocks due to multiple returns\n"})})}),(0,i.jsx)("td",{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"p.Lock()\ndefer p.Unlock()\n\nif p.count < 10 {\n  return p.count\n}\n\np.count++\nreturn p.count\n\n// more readable\n"})})})]})})]}),"\n",(0,i.jsxs)(n.p,{children:["Defer has an extremely small overhead and should be avoided only if you can prove that your function execution time is\nin the order of nanoseconds. The readability win of using defers is worth the miniscule cost of using them. This is\nespecially true for larger methods that have more than simple memory accesses, where the other computations are more\nsignificant than the ",(0,i.jsx)(n.code,{children:"defer"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"channel-size-is-one-or-none",children:"Channel Size is One or None"}),"\n",(0,i.jsx)(n.p,{children:"Channels should usually have a size of one or be unbuffered. By default, channels are unbuffered and have a size of\nzero. Any other size must be subject to a high level of scrutiny. Consider how the size is determined, what prevents the\nchannel from filling up under load and blocking writers, and what happens when this occurs."}),"\n",(0,i.jsxs)("table",{children:[(0,i.jsx)("thead",{children:(0,i.jsxs)("tr",{children:[(0,i.jsx)("th",{children:"Bad"}),(0,i.jsx)("th",{children:"Good"})]})}),(0,i.jsx)("tbody",{children:(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"// Ought to be enough for anybody!\nc := make(chan int, 64)\n"})})}),(0,i.jsx)("td",{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"// Size of one\nc := make(chan int, 1) // or\n// Unbuffered channel, size of zero\nc := make(chan int)\n"})})})]})})]}),"\n",(0,i.jsx)(n.h3,{id:"start-enums-at-one",children:"Start Enums at One"}),"\n",(0,i.jsxs)(n.p,{children:["The standard way of introducing enumerations in Go is to declare a custom type and a ",(0,i.jsx)(n.code,{children:"const"})," group with ",(0,i.jsx)(n.code,{children:"iota"}),". Since\nvariables have a 0 default value, you should usually start your enums on a non-zero value."]}),"\n",(0,i.jsxs)("table",{children:[(0,i.jsx)("thead",{children:(0,i.jsxs)("tr",{children:[(0,i.jsx)("th",{children:"Bad"}),(0,i.jsx)("th",{children:"Good"})]})}),(0,i.jsx)("tbody",{children:(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"type Operation int\n\nconst (\n  Add Operation = iota\n  Subtract\n  Multiply\n)\n\n// Add=0, Subtract=1, Multiply=2\n"})})}),(0,i.jsx)("td",{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"type Operation int\n\nconst (\n  Add Operation = iota + 1\n  Subtract\n  Multiply\n)\n\n// Add=1, Subtract=2, Multiply=3\n"})})})]})})]}),"\n",(0,i.jsx)(n.p,{children:"There are cases where using the zero value makes sense, for example when the zero value case is the desirable default\nbehavior."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"type LogOutput int\n\nconst (\n  LogToStdout LogOutput = iota\n  LogToFile\n  LogToRemote\n)\n\n// LogToStdout=0, LogToFile=1, LogToRemote=2\n"})}),"\n",(0,i.jsxs)(n.h3,{id:"use-time-to-handle-time",children:["Use ",(0,i.jsx)(n.code,{children:'"time"'})," to handle time"]}),"\n",(0,i.jsx)(n.p,{children:"Time is complicated. Incorrect assumptions often made about time include the following."}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"A day has 24 hours"}),"\n",(0,i.jsx)(n.li,{children:"An hour has 60 minutes"}),"\n",(0,i.jsx)(n.li,{children:"A week has 7 days"}),"\n",(0,i.jsx)(n.li,{children:"A year has 365 days"}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://infiniteundo.com/post/25326999628/falsehoods-programmers-believe-about-time",children:"And a lot more"})}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["For example, ",(0,i.jsx)(n.em,{children:"1"})," means that adding 24 hours to a time instant will not always yield a new calendar day."]}),"\n",(0,i.jsxs)(n.p,{children:["Therefore, always use the ",(0,i.jsx)(n.a,{href:"https://pkg.go.dev/time",children:(0,i.jsx)(n.code,{children:'"time"'})})," package when dealing with time because it helps deal with\nthese incorrect assumptions in a safer, more accurate manner."]}),"\n",(0,i.jsxs)(n.h4,{id:"use-timetime-for-instants-of-time",children:["Use ",(0,i.jsx)(n.code,{children:"time.Time"})," for instants of time"]}),"\n",(0,i.jsxs)(n.p,{children:["Use ",(0,i.jsx)(n.a,{href:"https://pkg.go.dev/time#Time",children:(0,i.jsx)(n.code,{children:"time.Time"})})," when dealing with instants of time, and the methods on ",(0,i.jsx)(n.code,{children:"time.Time"})," when\ncomparing, adding, or subtracting time."]}),"\n",(0,i.jsxs)("table",{children:[(0,i.jsx)("thead",{children:(0,i.jsxs)("tr",{children:[(0,i.jsx)("th",{children:"Bad"}),(0,i.jsx)("th",{children:"Good"})]})}),(0,i.jsx)("tbody",{children:(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"func isActive(now, start, stop int) bool {\n  return start <= now && now < stop\n}\n"})})}),(0,i.jsx)("td",{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"func isActive(now, start, stop time.Time) bool {\n  return (start.Before(now) || start.Equal(now)) && now.Before(stop)\n}\n"})})})]})})]}),"\n",(0,i.jsxs)(n.h4,{id:"use-timeduration-for-periods-of-time",children:["Use ",(0,i.jsx)(n.code,{children:"time.Duration"})," for periods of time"]}),"\n",(0,i.jsxs)(n.p,{children:["Use ",(0,i.jsx)(n.a,{href:"https://pkg.go.dev/time#Duration",children:(0,i.jsx)(n.code,{children:"time.Duration"})})," when dealing with periods of time."]}),"\n",(0,i.jsxs)("table",{children:[(0,i.jsx)("thead",{children:(0,i.jsxs)("tr",{children:[(0,i.jsx)("th",{children:"Bad"}),(0,i.jsx)("th",{children:"Good"})]})}),(0,i.jsx)("tbody",{children:(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"func poll(delay int) {\n  for {\n    // ...\n    time.Sleep(time.Duration(delay) * time.Millisecond)\n  }\n}\n\npoll(10) // was it seconds or milliseconds?\n"})})}),(0,i.jsx)("td",{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"func poll(delay time.Duration) {\n  for {\n    // ...\n    time.Sleep(delay)\n  }\n}\n\npoll(10*time.Second)\n"})})})]})})]}),"\n",(0,i.jsxs)(n.p,{children:["Going back to the example of adding 24 hours to a time instant, the method we use to add time depends on intent. If we\nwant the same time of the day, but on the next calendar day, we should\nuse ",(0,i.jsx)(n.a,{href:"https://pkg.go.dev/time#Time.AddDate",children:(0,i.jsx)(n.code,{children:"Time.AddDate"})}),". However, if we want an instant of time guaranteed to be 24\nhours after the previous time, we should use ",(0,i.jsx)(n.a,{href:"https://pkg.go.dev/time#Time.Add",children:(0,i.jsx)(n.code,{children:"Time.Add"})}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"newDay := t.AddDate(0 /* years */, 0 /* months */, 1 /* days */)\nmaybeNewDay := t.Add(24 * time.Hour)\n"})}),"\n",(0,i.jsxs)(n.h4,{id:"use-timetime-and-timeduration-with-external-systems",children:["Use ",(0,i.jsx)(n.code,{children:"time.Time"})," and ",(0,i.jsx)(n.code,{children:"time.Duration"})," with external systems"]}),"\n",(0,i.jsxs)(n.p,{children:["Use ",(0,i.jsx)(n.code,{children:"time.Duration"})," and ",(0,i.jsx)(n.code,{children:"time.Time"})," in interactions with external systems when possible. For example:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Command-line flags: ",(0,i.jsx)(n.a,{href:"https://pkg.go.dev/flag",children:(0,i.jsx)(n.code,{children:"flag"})})," supports ",(0,i.jsx)(n.code,{children:"time.Duration"}),"\nvia ",(0,i.jsx)(n.a,{href:"https://pkg.go.dev/time#ParseDuration",children:(0,i.jsx)(n.code,{children:"time.ParseDuration"})})]}),"\n",(0,i.jsxs)(n.li,{children:["JSON: ",(0,i.jsx)(n.a,{href:"https://pkg.go.dev/encoding/json",children:(0,i.jsx)(n.code,{children:"encoding/json"})})," supports encoding ",(0,i.jsx)(n.code,{children:"time.Time"})," as\nan ",(0,i.jsx)(n.a,{href:"https://tools.ietf.org/html/rfc3339",children:"RFC 3339"})," string via\nits ",(0,i.jsxs)(n.a,{href:"https://pkg.go.dev/time#Time.UnmarshalJSON",children:[(0,i.jsx)(n.code,{children:"UnmarshalJSON"})," method"]})]}),"\n",(0,i.jsxs)(n.li,{children:["SQL: ",(0,i.jsx)(n.a,{href:"https://pkg.go.dev/database/sql",children:(0,i.jsx)(n.code,{children:"database/sql"})})," supports converting ",(0,i.jsx)(n.code,{children:"DATETIME"})," or ",(0,i.jsx)(n.code,{children:"TIMESTAMP"})," columns\ninto ",(0,i.jsx)(n.code,{children:"time.Time"})," and back if the underlying driver supports it"]}),"\n",(0,i.jsxs)(n.li,{children:["YAML: ",(0,i.jsx)(n.a,{href:"https://pkg.go.dev/gopkg.in/yaml.v2",children:(0,i.jsx)(n.code,{children:"gopkg.in/yaml.v2"})})," supports ",(0,i.jsx)(n.code,{children:"time.Time"})," as\nan ",(0,i.jsx)(n.a,{href:"https://tools.ietf.org/html/rfc3339",children:"RFC 3339"})," string, and ",(0,i.jsx)(n.code,{children:"time.Duration"}),"\nvia ",(0,i.jsx)(n.a,{href:"https://pkg.go.dev/time#ParseDuration",children:(0,i.jsx)(n.code,{children:"time.ParseDuration"})}),"."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["When it is not possible to use ",(0,i.jsx)(n.code,{children:"time.Duration"})," in these interactions, use ",(0,i.jsx)(n.code,{children:"int"})," or ",(0,i.jsx)(n.code,{children:"float64"})," and include the unit in the\nname of the field."]}),"\n",(0,i.jsxs)(n.p,{children:["For example, since ",(0,i.jsx)(n.code,{children:"encoding/json"})," does not support ",(0,i.jsx)(n.code,{children:"time.Duration"}),", the unit is included in the name of the field."]}),"\n",(0,i.jsxs)("table",{children:[(0,i.jsx)("thead",{children:(0,i.jsxs)("tr",{children:[(0,i.jsx)("th",{children:"Bad"}),(0,i.jsx)("th",{children:"Good"})]})}),(0,i.jsx)("tbody",{children:(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'// {"interval": 2}\ntype Config struct {\n  Interval int `json:"interval"`\n}\n'})})}),(0,i.jsx)("td",{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'// {"intervalMillis": 2000}\ntype Config struct {\n  IntervalMillis int `json:"intervalMillis"`\n}\n'})})})]})})]}),"\n",(0,i.jsxs)(n.p,{children:["When it is not possible to use ",(0,i.jsx)(n.code,{children:"time.Time"})," in these interactions, unless an alternative is agreed upon, use ",(0,i.jsx)(n.code,{children:"string"})," and\nformat timestamps as defined in ",(0,i.jsx)(n.a,{href:"https://tools.ietf.org/html/rfc3339",children:"RFC 3339"}),". This format is used by default\nby ",(0,i.jsx)(n.a,{href:"https://pkg.go.dev/time#Time.UnmarshalText",children:(0,i.jsx)(n.code,{children:"Time.UnmarshalText"})})," and is available for use in ",(0,i.jsx)(n.code,{children:"Time.Format"}),"\nand ",(0,i.jsx)(n.code,{children:"time.Parse"})," via ",(0,i.jsx)(n.a,{href:"https://pkg.go.dev/time#RFC3339",children:(0,i.jsx)(n.code,{children:"time.RFC3339"})}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["Although this tends to not be a problem in practice, keep in mind that the ",(0,i.jsx)(n.code,{children:'"time"'})," package does not support parsing\ntimestamps with leap seconds (",(0,i.jsx)(n.a,{href:"https://github.com/golang/go/issues/8728",children:"8728"}),"), nor does it account for leap seconds in\ncalculations (",(0,i.jsx)(n.a,{href:"https://github.com/golang/go/issues/15190",children:"15190"}),"). If you compare two instants of time, the difference\nwill not include the leap seconds that may have occurred between those two instants."]}),"\n",(0,i.jsx)(n.h3,{id:"errors",children:"Errors"}),"\n",(0,i.jsx)(n.h4,{id:"error-types",children:"Error Types"}),"\n",(0,i.jsx)(n.p,{children:"There are few options for declaring errors.\nConsider the following before picking the option best suited for your use case."}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Does the caller need to match the error so that they can handle it? If yes, we must support\nthe ",(0,i.jsx)(n.a,{href:"https://pkg.go.dev/errors#Is",children:(0,i.jsx)(n.code,{children:"errors.Is"})})," or ",(0,i.jsx)(n.a,{href:"https://pkg.go.dev/errors#As",children:(0,i.jsx)(n.code,{children:"errors.As"})})," functions by declaring\na top-level error variable or a custom type."]}),"\n",(0,i.jsxs)(n.li,{children:["Is the error message a static string, or is it a dynamic string that requires contextual information? For the former,\nwe can use ",(0,i.jsx)(n.a,{href:"https://pkg.go.dev/errors#New",children:(0,i.jsx)(n.code,{children:"errors.New"})}),", but for the latter we must\nuse ",(0,i.jsx)(n.a,{href:"https://pkg.go.dev/fmt#Errorf",children:(0,i.jsx)(n.code,{children:"fmt.Errorf"})})," or a custom error type."]}),"\n",(0,i.jsxs)(n.li,{children:["Are we propagating a new error returned by a downstream function? If so, see\nthe ",(0,i.jsx)(n.a,{href:"#error-wrapping",children:"section on error wrapping"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Error matching?"}),(0,i.jsx)(n.th,{children:"Error Message"}),(0,i.jsx)(n.th,{children:"Guidance"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"No"}),(0,i.jsx)(n.td,{children:"static"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.a,{href:"https://pkg.go.dev/errors#New",children:(0,i.jsx)(n.code,{children:"errors.New"})})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"No"}),(0,i.jsx)(n.td,{children:"dynamic"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.a,{href:"https://pkg.go.dev/fmt#Errorf",children:(0,i.jsx)(n.code,{children:"fmt.Errorf"})})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Yes"}),(0,i.jsx)(n.td,{children:"static"}),(0,i.jsxs)(n.td,{children:["top-level ",(0,i.jsx)(n.code,{children:"var"})," with ",(0,i.jsx)(n.a,{href:"https://pkg.go.dev/errors#New",children:(0,i.jsx)(n.code,{children:"errors.New"})})]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Yes"}),(0,i.jsx)(n.td,{children:"dynamic"}),(0,i.jsxs)(n.td,{children:["custom ",(0,i.jsx)(n.code,{children:"error"})," type"]})]})]})]}),"\n",(0,i.jsxs)(n.p,{children:["For example,\nuse ",(0,i.jsx)(n.a,{href:"https://pkg.go.dev/errors#New",children:(0,i.jsx)(n.code,{children:"errors.New"})})," for an error with a static string.\nExport this error as a variable to support matching it with ",(0,i.jsx)(n.code,{children:"errors.Is"}),"\nif the caller needs to match and handle this error."]}),"\n",(0,i.jsxs)("table",{children:[(0,i.jsx)("thead",{children:(0,i.jsxs)("tr",{children:[(0,i.jsx)("th",{children:"No error matching"}),(0,i.jsx)("th",{children:"Error matching"})]})}),(0,i.jsx)("tbody",{children:(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'// package foo\n\nfunc Open() error {\n  return errors.New("could not open")\n}\n\n// package bar\n\nif err := foo.Open(); err != nil {\n  // Can\'t handle the error.\n  panic("unknown error")\n}\n'})})}),(0,i.jsx)("td",{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'// package foo\n\nvar ErrCouldNotOpen = errors.New("could not open")\n\nfunc Open() error {\n  return ErrCouldNotOpen\n}\n\n// package bar\n\nif err := foo.Open(); err != nil {\n  if errors.Is(err, foo.ErrCouldNotOpen) {\n    // handle the error\n  } else {\n    panic("unknown error")\n  }\n}\n'})})})]})})]}),"\n",(0,i.jsxs)(n.p,{children:["For an error with a dynamic string,\nuse ",(0,i.jsx)(n.a,{href:"https://pkg.go.dev/fmt#Errorf",children:(0,i.jsx)(n.code,{children:"fmt.Errorf"})})," if the caller does not need to match it,\nand a custom ",(0,i.jsx)(n.code,{children:"error"})," if the caller does need to match it."]}),"\n",(0,i.jsxs)("table",{children:[(0,i.jsx)("thead",{children:(0,i.jsxs)("tr",{children:[(0,i.jsx)("th",{children:"No error matching"}),(0,i.jsx)("th",{children:"Error matching"})]})}),(0,i.jsx)("tbody",{children:(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'// package foo\n\nfunc Open(file string) error {\n  return fmt.Errorf("file %q not found", file)\n}\n\n// package bar\n\nif err := foo.Open("testfile.txt"); err != nil {\n  // Can\'t handle the error.\n  panic("unknown error")\n}\n'})})}),(0,i.jsx)("td",{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'// package foo\n\ntype NotFoundError struct {\n  File string\n}\n\nfunc (e *NotFoundError) Error() string {\n  return fmt.Sprintf("file %q not found", e.File)\n}\n\nfunc Open(file string) error {\n  return &NotFoundError{File: file}\n}\n\n\n// package bar\n\nif err := foo.Open("testfile.txt"); err != nil {\n  var notFound *NotFoundError\n  if errors.As(err, &notFound) {\n    // handle the error\n  } else {\n    panic("unknown error")\n  }\n}\n'})})})]})})]}),"\n",(0,i.jsx)(n.p,{children:"Note that if you export error variables or types from a package, they will become part of the public API of the package."}),"\n",(0,i.jsx)(n.h4,{id:"error-wrapping",children:"Error Wrapping"}),"\n",(0,i.jsx)(n.p,{children:"There are three main options for propagating errors if a call fails:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"return the original error as-is"}),"\n",(0,i.jsxs)(n.li,{children:["add context with ",(0,i.jsx)(n.code,{children:"fmt.Errorf"})," and the ",(0,i.jsx)(n.code,{children:"%w"})," verb"]}),"\n",(0,i.jsxs)(n.li,{children:["add context with ",(0,i.jsx)(n.code,{children:"fmt.Errorf"})," and the ",(0,i.jsx)(n.code,{children:"%v"})," verb"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Return the original error as-is if there is no additional context to add. This maintains the original error type and\nmessage. This is well suited for cases when the underlying error message has sufficient information to track down where\nit came from."}),"\n",(0,i.jsx)(n.p,{children:'Otherwise, add context to the error message where possible so that instead of a vague error such as "connection\nrefused", you get more useful errors such as "call service foo: connection refused".'}),"\n",(0,i.jsxs)(n.p,{children:["Use ",(0,i.jsx)(n.code,{children:"fmt.Errorf"})," to add context to your errors, picking between the ",(0,i.jsx)(n.code,{children:"%w"})," or ",(0,i.jsx)(n.code,{children:"%v"})," verbs based on whether the caller\nshould be able to match and extract the underlying cause."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Use ",(0,i.jsx)(n.code,{children:"%w"})," if the caller should have access to the underlying error. This is a good default for most wrapped errors, but\nbe aware that callers may begin to rely on this behavior. So for cases where the wrapped error is a known ",(0,i.jsx)(n.code,{children:"var"})," or\ntype, document and test it as part of your function's contract."]}),"\n",(0,i.jsxs)(n.li,{children:["Use ",(0,i.jsx)(n.code,{children:"%v"})," to obfuscate the underlying error. Callers will be unable to match it, but you can switch to ",(0,i.jsx)(n.code,{children:"%w"})," in the\nfuture if needed."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:'When adding context to returned errors, keep the context succinct by avoiding phrases like "failed to", which state the\nobvious and pile up as the error percolates up through the stack:'}),"\n",(0,i.jsxs)("table",{children:[(0,i.jsx)("thead",{children:(0,i.jsxs)("tr",{children:[(0,i.jsx)("th",{children:"Bad"}),(0,i.jsx)("th",{children:"Good"})]})}),(0,i.jsxs)("tbody",{children:[(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'s, err := store.New()\nif err != nil {\n    return fmt.Errorf(\n        "failed to create new store: %w", err)\n}\n'})})}),(0,i.jsx)("td",{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'s, err := store.New()\nif err != nil {\n    return fmt.Errorf(\n        "new store: %w", err)\n}\n'})})})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-plain",children:"failed to x: failed to y: failed to create new store: the error\n"})})}),(0,i.jsx)("td",{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-plain",children:"x: y: new store: the error\n"})})})]})]})]}),"\n",(0,i.jsxs)(n.p,{children:["However once the error is sent to another system, it should be clear the message is an error\n(e.g. an ",(0,i.jsx)(n.code,{children:"err"}),' tag or "Failed" prefix in logs).']}),"\n",(0,i.jsxs)(n.p,{children:["See also\n",(0,i.jsx)(n.a,{href:"https://dave.cheney.net/2016/04/27/dont-just-check-errors-handle-them-gracefully",children:"Don't just check errors, handle them gracefully"}),"."]}),"\n",(0,i.jsx)(n.h4,{id:"error-naming",children:"Error Naming"}),"\n",(0,i.jsxs)(n.p,{children:["For error values stored as global variables, use the prefix ",(0,i.jsx)(n.code,{children:"Err"})," or ",(0,i.jsx)(n.code,{children:"err"})," depending on whether they're exported.\nThis guidance supersedes the ",(0,i.jsx)(n.a,{href:"#prefix-unexported-globals-with-_",children:"Prefix Unexported Globals with _"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'var (\n  // The following two errors are exported\n  // so that users of this package can match them\n  // with errors.Is.\n\n  ErrBrokenLink = errors.New("link is broken")\n  ErrCouldNotOpen = errors.New("could not open")\n\n  // This error is not exported because\n  // we don\'t want to make it part of our public API.\n  // We may still use it inside the package\n  // with errors.Is.\n\n  errNotFound = errors.New("not found")\n)\n'})}),"\n",(0,i.jsxs)(n.p,{children:["For custom error types, use the suffix ",(0,i.jsx)(n.code,{children:"Error"})," instead."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'// Similarly, this error is exported\n// so that users of this package can match it\n// with errors.As.\n\ntype NotFoundError struct {\n  File string\n}\n\nfunc (e *NotFoundError) Error() string {\n  return fmt.Sprintf("file %q not found", e.File)\n}\n\n// And this error is not exported because\n// we don\'t want to make it part of the public API.\n// We can still use it inside the package\n// with errors.As.\n\ntype resolveError struct {\n  Path string\n}\n\nfunc (e *resolveError) Error() string {\n  return fmt.Sprintf("resolve %q", e.Path)\n}\n'})}),"\n",(0,i.jsx)(n.h4,{id:"handle-errors-once",children:"Handle Errors Once"}),"\n",(0,i.jsx)(n.p,{children:"When a caller receives an error from a callee, it can handle it in a variety of different ways depending on what it\nknows about the error."}),"\n",(0,i.jsx)(n.p,{children:"These include, but not are limited to:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["if the callee contract defines specific errors, matching the error with ",(0,i.jsx)(n.code,{children:"errors.Is"})," or ",(0,i.jsx)(n.code,{children:"errors.As"})," and handling the\nbranches differently"]}),"\n",(0,i.jsx)(n.li,{children:"if the error is recoverable, logging the error and degrading gracefully"}),"\n",(0,i.jsx)(n.li,{children:"if the error represents a domain-specific failure condition, returning a well-defined error"}),"\n",(0,i.jsxs)(n.li,{children:["returning the error, either ",(0,i.jsx)(n.a,{href:"#error-wrapping",children:"wrapped"})," or verbatim"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["Regardless of how the caller handles the error, it should typically handle each error only once. The caller should not,\nfor example, log the error and then return it, because ",(0,i.jsx)(n.em,{children:"its"})," callers may handle the error as well."]}),"\n",(0,i.jsx)(n.p,{children:"For example, consider the following cases:"}),"\n",(0,i.jsxs)("table",{children:[(0,i.jsx)("thead",{children:(0,i.jsxs)("tr",{children:[(0,i.jsx)("th",{children:"Description"}),(0,i.jsx)("th",{children:"Code"})]})}),(0,i.jsxs)("tbody",{children:[(0,i.jsxs)("tr",{children:[(0,i.jsxs)("td",{children:[(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Bad"}),": Log the error and return it"]}),(0,i.jsx)(n.p,{children:"Callers further up the stack will likely take a similar action with the error. Doing so causing a lot of noise in the\napplication logs for little value."})]}),(0,i.jsx)("td",{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'u, err := getUser(id)\nif err != nil {\n  // BAD: See description\n  log.Printf("Could not get user %q: %v", id, err)\n  return err\n}\n'})})})]}),(0,i.jsxs)("tr",{children:[(0,i.jsxs)("td",{children:[(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Good"}),": Wrap the error and return it"]}),(0,i.jsxs)(n.p,{children:["Callers further up the stack will handle the error. Use of ",(0,i.jsx)(n.code,{children:"%w"})," ensures they can match the error with ",(0,i.jsx)(n.code,{children:"errors.Is"}),"\nor ",(0,i.jsx)(n.code,{children:"errors.As"})," if relevant."]})]}),(0,i.jsx)("td",{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'u, err := getUser(id)\nif err != nil {\n  return fmt.Errorf("get user %q: %w", id, err)\n}\n'})})})]}),(0,i.jsxs)("tr",{children:[(0,i.jsxs)("td",{children:[(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Good"}),": Log the error and degrade gracefully"]}),(0,i.jsx)(n.p,{children:"If the operation isn't strictly necessary, we can provide a degraded but unbroken experience by recovering from it."})]}),(0,i.jsx)("td",{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'if err := emitMetrics(); err != nil {\n  // Failure to write metrics should not\n  // break the application.\n  log.Printf("Could not emit metrics: %v", err)\n}\n\n'})})})]}),(0,i.jsxs)("tr",{children:[(0,i.jsxs)("td",{children:[(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Good"}),": Match the error and degrade gracefully"]}),(0,i.jsx)(n.p,{children:"If the callee defines a specific error in its contract, and the failure is recoverable, match on that error case and\ndegrade gracefully. For all other cases, wrap the error and return it."}),(0,i.jsx)(n.p,{children:"Callers further up the stack will handle other errors."})]}),(0,i.jsx)("td",{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'tz, err := getUserTimeZone(id)\nif err != nil {\n  if errors.Is(err, ErrUserNotFound) {\n    // User doesn\'t exist. Use UTC.\n    tz = time.UTC\n  } else {\n    return fmt.Errorf("get user %q: %w", id, err)\n  }\n}\n'})})})]})]})]}),"\n",(0,i.jsx)(n.h3,{id:"handle-type-assertion-failures",children:"Handle Type Assertion Failures"}),"\n",(0,i.jsxs)(n.p,{children:["The single return value form of a ",(0,i.jsx)(n.a,{href:"https://go.dev/ref/spec#Type_assertions",children:"type assertion"}),' will panic on an incorrect\ntype. Therefore, always use the "comma ok" idiom.']}),"\n",(0,i.jsxs)("table",{children:[(0,i.jsx)("thead",{children:(0,i.jsxs)("tr",{children:[(0,i.jsx)("th",{children:"Bad"}),(0,i.jsx)("th",{children:"Good"})]})}),(0,i.jsx)("tbody",{children:(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"t := i.(string)\n"})})}),(0,i.jsx)("td",{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"t, ok := i.(string)\nif !ok {\n  // handle the error gracefully\n}\n"})})})]})})]}),"\n",(0,i.jsx)(n.h3,{id:"dont-panic",children:"Don't Panic"}),"\n",(0,i.jsxs)(n.p,{children:["Code running in production must avoid panics.\nPanics are a major source of ",(0,i.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Cascading_failure",children:"cascading failures"}),".\nIf an error occurs, the function must return an error and allow the caller to decide how to handle it."]}),"\n",(0,i.jsxs)("table",{children:[(0,i.jsx)("thead",{children:(0,i.jsxs)("tr",{children:[(0,i.jsx)("th",{children:"Bad"}),(0,i.jsx)("th",{children:"Good"})]})}),(0,i.jsx)("tbody",{children:(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'func run(args []string) {\n  if len(args) == 0 {\n    panic("an argument is required")\n  }\n  // ...\n}\n\nfunc main() {\n  run(os.Args[1:])\n}\n'})})}),(0,i.jsx)("td",{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'func run(args []string) error {\n  if len(args) == 0 {\n    return errors.New("an argument is required")\n  }\n  // ...\n  return nil\n}\n\nfunc main() {\n  if err := run(os.Args[1:]); err != nil {\n    fmt.Fprintln(os.Stderr, err)\n    os.Exit(1)\n  }\n}\n'})})})]})})]}),"\n",(0,i.jsx)(n.p,{children:"Panic/recover is not an error handling strategy. A program must panic only when something irrecoverable happens such as\na nil dereference. An exception to this is program initialization: bad things at program startup that should abort the\nprogram may cause panic."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'var _statusTemplate = template.Must(template.New("name").Parse("_statusHTML"))\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Even in tests, prefer ",(0,i.jsx)(n.code,{children:"t.Fatal"})," or ",(0,i.jsx)(n.code,{children:"t.FailNow"})," over panics to ensure that the test is marked as failed."]}),"\n",(0,i.jsxs)("table",{children:[(0,i.jsx)("thead",{children:(0,i.jsxs)("tr",{children:[(0,i.jsx)("th",{children:"Bad"}),(0,i.jsx)("th",{children:"Good"})]})}),(0,i.jsx)("tbody",{children:(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'// func TestFoo(t *testing.T)\n\nf, err := os.CreateTemp("", "test")\nif err != nil {\n  panic("failed to set up test")\n}\n'})})}),(0,i.jsx)("td",{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'// func TestFoo(t *testing.T)\n\nf, err := os.CreateTemp("", "test")\nif err != nil {\n  t.Fatal("failed to set up test")\n}\n'})})})]})})]}),"\n",(0,i.jsx)(n.h3,{id:"avoid-mutable-globals",children:"Avoid Mutable Globals"}),"\n",(0,i.jsx)(n.p,{children:"Avoid mutating global variables, instead opting for dependency injection. This applies to function pointers as well as\nother kinds of values."}),"\n",(0,i.jsxs)("table",{children:[(0,i.jsx)("thead",{children:(0,i.jsxs)("tr",{children:[(0,i.jsx)("th",{children:"Bad"}),(0,i.jsx)("th",{children:"Good"})]})}),(0,i.jsxs)("tbody",{children:[(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"// sign.go\n\nvar _timeNow = time.Now\n\nfunc sign(msg string) string {\n  now := _timeNow()\n  return signWithTime(msg, now)\n}\n"})})}),(0,i.jsx)("td",{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"// sign.go\n\ntype signer struct {\n  now func() time.Time\n}\n\nfunc newSigner() *signer {\n  return &signer{\n    now: time.Now,\n  }\n}\n\nfunc (s *signer) Sign(msg string) string {\n  now := s.now()\n  return signWithTime(msg, now)\n}\n"})})})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"// sign_test.go\n\nfunc TestSign(t *testing.T) {\n  oldTimeNow := _timeNow\n  _timeNow = func() time.Time {\n    return someFixedTime\n  }\n  defer func() { _timeNow = oldTimeNow }()\n\n  assert.Equal(t, want, sign(give))\n}\n"})})}),(0,i.jsx)("td",{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"// sign_test.go\n\nfunc TestSigner(t *testing.T) {\n  s := newSigner()\n  s.now = func() time.Time {\n    return someFixedTime\n  }\n\n  assert.Equal(t, want, s.Sign(give))\n}\n"})})})]})]})]}),"\n",(0,i.jsx)(n.h3,{id:"avoid-embedding-types-in-public-structs",children:"Avoid Embedding Types in Public Structs"}),"\n",(0,i.jsx)(n.p,{children:"These embedded types leak implementation details, inhibit type evolution, and obscure documentation."}),"\n",(0,i.jsxs)(n.p,{children:["Assuming you have implemented a variety of list types using a shared ",(0,i.jsx)(n.code,{children:"AbstractList"}),", avoid embedding the ",(0,i.jsx)(n.code,{children:"AbstractList"}),"\nin your concrete list implementations. Instead, hand-write only the methods to your concrete list that will delegate to\nthe abstract list."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"type AbstractList struct {}\n\n// Add adds an entity to the list.\nfunc (l *AbstractList) Add(e Entity) {\n  // ...\n}\n\n// Remove removes an entity from the list.\nfunc (l *AbstractList) Remove(e Entity) {\n  // ...\n}\n"})}),"\n",(0,i.jsxs)("table",{children:[(0,i.jsx)("thead",{children:(0,i.jsxs)("tr",{children:[(0,i.jsx)("th",{children:"Bad"}),(0,i.jsx)("th",{children:"Good"})]})}),(0,i.jsx)("tbody",{children:(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"// ConcreteList is a list of entities.\ntype ConcreteList struct {\n  *AbstractList\n}\n"})})}),(0,i.jsx)("td",{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"// ConcreteList is a list of entities.\ntype ConcreteList struct {\n  list *AbstractList\n}\n\n// Add adds an entity to the list.\nfunc (l *ConcreteList) Add(e Entity) {\n  l.list.Add(e)\n}\n\n// Remove removes an entity from the list.\nfunc (l *ConcreteList) Remove(e Entity) {\n  l.list.Remove(e)\n}\n"})})})]})})]}),"\n",(0,i.jsxs)(n.p,{children:["Go allows ",(0,i.jsx)(n.a,{href:"https://go.dev/doc/effective_go#embedding",children:"type embedding"})," as a compromise between inheritance and\ncomposition. The outer type gets implicit copies of the embedded type's methods. These methods, by default, delegate to\nthe same method of the embedded instance."]}),"\n",(0,i.jsx)(n.p,{children:"The struct also gains a field by the same name as the type. So, if the embedded type is public, the field is public. To\nmaintain backward compatibility, every future version of the outer type must keep the embedded type."}),"\n",(0,i.jsx)(n.p,{children:"An embedded type is rarely necessary. It is a convenience that helps you avoid writing tedious delegate methods."}),"\n",(0,i.jsxs)(n.p,{children:["Even embedding a compatible AbstractList ",(0,i.jsx)(n.em,{children:"interface"}),", instead of the struct, would offer the developer more flexibility\nto change in the future, but still leak the detail that the concrete lists use an abstract implementation."]}),"\n",(0,i.jsxs)("table",{children:[(0,i.jsx)("thead",{children:(0,i.jsxs)("tr",{children:[(0,i.jsx)("th",{children:"Bad"}),(0,i.jsx)("th",{children:"Good"})]})}),(0,i.jsx)("tbody",{children:(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"// AbstractList is a generalized implementation\n// for various kinds of lists of entities.\ntype AbstractList interface {\n  Add(Entity)\n  Remove(Entity)\n}\n\n// ConcreteList is a list of entities.\ntype ConcreteList struct {\n  AbstractList\n}\n"})})}),(0,i.jsx)("td",{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"// ConcreteList is a list of entities.\ntype ConcreteList struct {\n  list AbstractList\n}\n\n// Add adds an entity to the list.\nfunc (l *ConcreteList) Add(e Entity) {\n  l.list.Add(e)\n}\n\n// Remove removes an entity from the list.\nfunc (l *ConcreteList) Remove(e Entity) {\n  l.list.Remove(e)\n}\n"})})})]})})]}),"\n",(0,i.jsx)(n.p,{children:"Either with an embedded struct or an embedded interface, the embedded type places limits on the evolution of the type."}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Adding methods to an embedded interface is a breaking change."}),"\n",(0,i.jsx)(n.li,{children:"Removing methods from an embedded struct is a breaking change."}),"\n",(0,i.jsx)(n.li,{children:"Removing the embedded type is a breaking change."}),"\n",(0,i.jsx)(n.li,{children:"Replacing the embedded type, even with an alternative that satisfies the same interface, is a breaking change."}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Although writing these delegate methods is tedious, the additional effort hides an implementation detail, leaves more\nopportunities for change, and also eliminates indirection for discovering the full List interface in documentation."}),"\n",(0,i.jsx)(n.h3,{id:"avoid-using-built-in-names",children:"Avoid Using Built-In Names"}),"\n",(0,i.jsxs)(n.p,{children:["The Go ",(0,i.jsx)(n.a,{href:"https://go.dev/ref/spec",children:"language specification"})," outlines several\nbuilt-in, ",(0,i.jsx)(n.a,{href:"https://go.dev/ref/spec#Predeclared_identifiers",children:"predeclared identifiers"})," that should not be used as names\nwithin Go programs."]}),"\n",(0,i.jsx)(n.p,{children:"Depending on context, reusing these identifiers as names will either shadow the original within the current lexical\nscope (and any nested scopes) or make affected code confusing. In the best case, the compiler will complain; in the\nworst case, such code may introduce latent, hard-to-grep bugs."}),"\n",(0,i.jsxs)("table",{children:[(0,i.jsx)("thead",{children:(0,i.jsxs)("tr",{children:[(0,i.jsx)("th",{children:"Bad"}),(0,i.jsx)("th",{children:"Good"})]})}),(0,i.jsxs)("tbody",{children:[(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"var error string\n// `error` shadows the builtin\n\n// or\n\nfunc handleErrorMessage(error string) {\n    // `error` shadows the builtin\n}\n"})})}),(0,i.jsx)("td",{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"var errorMessage string\n// `error` refers to the builtin\n\n// or\n\nfunc handleErrorMessage(msg string) {\n    // `error` refers to the builtin\n}\n"})})})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"type Foo struct {\n    // While these fields technically don't\n    // constitute shadowing, grepping for\n    // `error` or `string` strings is now\n    // ambiguous.\n    error  error\n    string string\n}\n\nfunc (f Foo) Error() error {\n    // `error` and `f.error` are\n    // visually similar\n    return f.error\n}\n\nfunc (f Foo) String() string {\n    // `string` and `f.string` are\n    // visually similar\n    return f.string\n}\n"})})}),(0,i.jsx)("td",{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"type Foo struct {\n    // `error` and `string` strings are\n    // now unambiguous.\n    err error\n    str string\n}\n\nfunc (f Foo) Error() error {\n    return f.err\n}\n\nfunc (f Foo) String() string {\n    return f.str\n}\n"})})})]})]})]}),"\n",(0,i.jsxs)(n.p,{children:["Note that the compiler will not generate errors when using predeclared identifiers, but tools such as ",(0,i.jsx)(n.code,{children:"go vet"})," should\ncorrectly point out these and other cases of shadowing."]}),"\n",(0,i.jsxs)(n.h3,{id:"avoid-init",children:["Avoid ",(0,i.jsx)(n.code,{children:"init()"})]}),"\n",(0,i.jsxs)(n.p,{children:["Avoid ",(0,i.jsx)(n.code,{children:"init()"})," where possible. When ",(0,i.jsx)(n.code,{children:"init()"})," is unavoidable or desirable, code should attempt to:"]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Be completely deterministic, regardless of program environment or invocation."}),"\n",(0,i.jsxs)(n.li,{children:["Avoid depending on the ordering or side-effects of other ",(0,i.jsx)(n.code,{children:"init()"})," functions. While ",(0,i.jsx)(n.code,{children:"init()"})," ordering is well-known,\ncode can change, and thus relationships between ",(0,i.jsx)(n.code,{children:"init()"})," functions can make code brittle and error-prone."]}),"\n",(0,i.jsx)(n.li,{children:"Avoid accessing or manipulating global or environment state, such as machine information, environment variables,\nworking directory, program arguments/inputs, etc."}),"\n",(0,i.jsx)(n.li,{children:"Avoid I/O, including both filesystem, network, and system calls."}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["Code that cannot satisfy these requirements likely belongs as a helper to be called as part of ",(0,i.jsx)(n.code,{children:"main()"})," (or elsewhere in\na program's lifecycle), or be written as part of ",(0,i.jsx)(n.code,{children:"main()"}),' itself. In particular, libraries that are intended to be used\nby other programs should take special care to be completely deterministic and not perform "init magic".']}),"\n",(0,i.jsxs)("table",{children:[(0,i.jsx)("thead",{children:(0,i.jsxs)("tr",{children:[(0,i.jsx)("th",{children:"Bad"}),(0,i.jsx)("th",{children:"Good"})]})}),(0,i.jsxs)("tbody",{children:[(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"type Foo struct {\n    // ...\n}\n\nvar _defaultFoo Foo\n\nfunc init() {\n    _defaultFoo = Foo{\n        // ...\n    }\n}\n"})})}),(0,i.jsx)("td",{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"var _defaultFoo = Foo{\n    // ...\n}\n\n// or, better, for testability:\n\nvar _defaultFoo = defaultFoo()\n\nfunc defaultFoo() Foo {\n    return Foo{\n        // ...\n    }\n}\n"})})})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'type Config struct {\n    // ...\n}\n\nvar _config Config\n\nfunc init() {\n    // Bad: based on current directory\n    cwd, _ := os.Getwd()\n\n    // Bad: I/O\n    raw, _ := os.ReadFile(\n        path.Join(cwd, "config", "config.yaml"),\n    )\n\n    yaml.Unmarshal(raw, &_config)\n}\n'})})}),(0,i.jsx)("td",{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'type Config struct {\n    // ...\n}\n\nfunc loadConfig() Config {\n    cwd, err := os.Getwd()\n    // handle err\n\n    raw, err := os.ReadFile(\n        path.Join(cwd, "config", "config.yaml"),\n    )\n    // handle err\n\n    var config Config\n    yaml.Unmarshal(raw, &config)\n\n    return config\n}\n'})})})]})]})]}),"\n",(0,i.jsxs)(n.p,{children:["Considering the above, some situations in which ",(0,i.jsx)(n.code,{children:"init()"})," may be preferable or necessary might include:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Complex expressions that cannot be represented as single assignments."}),"\n",(0,i.jsxs)(n.li,{children:["Pluggable hooks, such as ",(0,i.jsx)(n.code,{children:"database/sql"})," dialects, encoding type registries, etc."]}),"\n",(0,i.jsxs)(n.li,{children:["Optimizations to\n",(0,i.jsx)(n.a,{href:"https://cloud.google.com/functions/docs/bestpractices/tips#use_global_variables_to_reuse_objects_in_future_invocations",children:"Google Cloud Functions"}),"\nand other forms of deterministic precomputation."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"exit-in-main",children:"Exit in Main"}),"\n",(0,i.jsxs)(n.p,{children:["Go programs use ",(0,i.jsx)(n.a,{href:"https://pkg.go.dev/os#Exit",children:(0,i.jsx)(n.code,{children:"os.Exit"})})," or ",(0,i.jsx)(n.a,{href:"https://pkg.go.dev/log#Fatal",children:(0,i.jsx)(n.code,{children:"log.Fatal*"})})," to exit\nimmediately. (Panicking is not a good way to exit programs, please ",(0,i.jsx)(n.a,{href:"#dont-panic",children:"don't panic"}),".)"]}),"\n",(0,i.jsxs)(n.p,{children:["Call one of ",(0,i.jsx)(n.code,{children:"os.Exit"})," or ",(0,i.jsx)(n.code,{children:"log.Fatal*"})," ",(0,i.jsxs)(n.strong,{children:["only in ",(0,i.jsx)(n.code,{children:"main()"})]}),". All other functions should return errors to signal failure."]}),"\n",(0,i.jsxs)("table",{children:[(0,i.jsx)("thead",{children:(0,i.jsxs)("tr",{children:[(0,i.jsx)("th",{children:"Bad"}),(0,i.jsx)("th",{children:"Good"})]})}),(0,i.jsx)("tbody",{children:(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"func main() {\n  body := readFile(path)\n  fmt.Println(body)\n}\n\nfunc readFile(path string) string {\n  f, err := os.Open(path)\n  if err != nil {\n    log.Fatal(err)\n  }\n\n  b, err := io.ReadAll(f)\n  if err != nil {\n    log.Fatal(err)\n  }\n\n  return string(b)\n}\n"})})}),(0,i.jsx)("td",{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'func main() {\n  body, err := readFile(path)\n  if err != nil {\n    log.Fatal(err)\n  }\n  fmt.Println(body)\n}\n\nfunc readFile(path string) (string, error) {\n  f, err := os.Open(path)\n  if err != nil {\n    return "", err\n  }\n\n  b, err := io.ReadAll(f)\n  if err != nil {\n    return "", err\n  }\n\n  return string(b), nil\n}\n'})})})]})})]}),"\n",(0,i.jsx)(n.p,{children:"Rationale: Programs with multiple functions that exit present a few issues:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Non-obvious control flow: Any function can exit the program so it becomes difficult to reason about the control flow."}),"\n",(0,i.jsxs)(n.li,{children:["Difficult to test: A function that exits the program will also exit the test calling it. This makes the function\ndifficult to test and introduces risk of skipping other tests that have not yet been run by ",(0,i.jsx)(n.code,{children:"go test"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["Skipped cleanup: When a function exits the program, it skips function calls enqueued with ",(0,i.jsx)(n.code,{children:"defer"})," statements. This\nadds risk of skipping important cleanup tasks."]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"exit-once",children:"Exit Once"}),"\n",(0,i.jsxs)(n.p,{children:["If possible, prefer to call ",(0,i.jsx)(n.code,{children:"os.Exit"})," or ",(0,i.jsx)(n.code,{children:"log.Fatal"})," ",(0,i.jsx)(n.strong,{children:"at most once"})," in your ",(0,i.jsx)(n.code,{children:"main()"}),". If there are multiple error\nscenarios that halt program execution, put that logic under a separate function and return errors from it."]}),"\n",(0,i.jsxs)(n.p,{children:["This has the effect of shortening your ",(0,i.jsx)(n.code,{children:"main()"})," function and putting all key business logic into a separate, testable\nfunction."]}),"\n",(0,i.jsxs)("table",{children:[(0,i.jsx)("thead",{children:(0,i.jsxs)("tr",{children:[(0,i.jsx)("th",{children:"Bad"}),(0,i.jsx)("th",{children:"Good"})]})}),(0,i.jsx)("tbody",{children:(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'package main\n\nfunc main() {\n  args := os.Args[1:]\n  if len(args) != 1 {\n    log.Fatal("missing file")\n  }\n  name := args[0]\n\n  f, err := os.Open(name)\n  if err != nil {\n    log.Fatal(err)\n  }\n  defer f.Close()\n\n  // If we call log.Fatal after this line,\n  // f.Close will not be called.\n\n  b, err := io.ReadAll(f)\n  if err != nil {\n    log.Fatal(err)\n  }\n\n  // ...\n}\n'})})}),(0,i.jsx)("td",{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'package main\n\nfunc main() {\n  if err := run(); err != nil {\n    log.Fatal(err)\n  }\n}\n\nfunc run() error {\n  args := os.Args[1:]\n  if len(args) != 1 {\n    return errors.New("missing file")\n  }\n  name := args[0]\n\n  f, err := os.Open(name)\n  if err != nil {\n    return err\n  }\n  defer f.Close()\n\n  b, err := io.ReadAll(f)\n  if err != nil {\n    return err\n  }\n\n  // ...\n}\n'})})})]})})]}),"\n",(0,i.jsxs)(n.p,{children:["The example above uses ",(0,i.jsx)(n.code,{children:"log.Fatal"}),", but the guidance also applies to ",(0,i.jsx)(n.code,{children:"os.Exit"})," or any library code that calls ",(0,i.jsx)(n.code,{children:"os.Exit"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"func main() {\n  if err := run(); err != nil {\n    fmt.Fprintln(os.Stderr, err)\n    os.Exit(1)\n  }\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["You may alter the signature of ",(0,i.jsx)(n.code,{children:"run()"})," to fit your needs. For example, if your program must exit with specific exit\ncodes for failures, ",(0,i.jsx)(n.code,{children:"run()"})," may return the exit code instead of an error. This allows unit tests to verify this behavior\ndirectly as well."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"func main() {\n  os.Exit(run(args))\n}\n\nfunc run() (exitCode int) {\n  // ...\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["More generally, note that the ",(0,i.jsx)(n.code,{children:"run()"})," function used in these examples is not intended to be prescriptive.\nThere's flexibility in the name, signature, and setup of the ",(0,i.jsx)(n.code,{children:"run()"})," function.\nAmong other things, you may:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["accept unparsed command line arguments (e.g., ",(0,i.jsx)(n.code,{children:"run(os.Args[1:])"}),")"]}),"\n",(0,i.jsxs)(n.li,{children:["parse command line arguments in ",(0,i.jsx)(n.code,{children:"main()"})," and pass them onto ",(0,i.jsx)(n.code,{children:"run"})]}),"\n",(0,i.jsxs)(n.li,{children:["use a custom error type to carry the exit code back to ",(0,i.jsx)(n.code,{children:"main()"})]}),"\n",(0,i.jsxs)(n.li,{children:["put business logic in a different layer of abstraction from ",(0,i.jsx)(n.code,{children:"package main"})]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["This guidance only requires that there's a single place in your ",(0,i.jsx)(n.code,{children:"main()"})," responsible for actually exiting the process."]}),"\n",(0,i.jsx)(n.h3,{id:"use-field-tags-in-marshaled-structs",children:"Use field tags in marshaled structs"}),"\n",(0,i.jsx)(n.p,{children:"Any struct field that is marshaled into JSON, YAML, or other formats that support tag-based field naming should be\nannotated with the relevant tag."}),"\n",(0,i.jsxs)("table",{children:[(0,i.jsx)("thead",{children:(0,i.jsxs)("tr",{children:[(0,i.jsx)("th",{children:"Bad"}),(0,i.jsx)("th",{children:"Good"})]})}),(0,i.jsx)("tbody",{children:(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'type Stock struct {\n  Price int\n  Name  string\n}\n\nbytes, err := json.Marshal(Stock{\n  Price: 137,\n  Name:  "UBER",\n})\n'})})}),(0,i.jsx)("td",{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'type Stock struct {\n  Price int    `json:"price"`\n  Name  string `json:"name"`\n  // Safe to rename Name to Symbol.\n}\n\nbytes, err := json.Marshal(Stock{\n  Price: 137,\n  Name:  "UBER",\n})\n'})})})]})})]}),"\n",(0,i.jsx)(n.p,{children:"Rationale: The serialized form of the structure is a contract between different systems. Changes to the structure of the\nserialized form--including field names--break this contract. Specifying field names inside tags makes the contract\nexplicit, and it guards against accidentally breaking the contract by refactoring or renaming fields."}),"\n",(0,i.jsx)(n.h3,{id:"dont-fire-and-forget-goroutines",children:"Don't fire-and-forget goroutines"}),"\n",(0,i.jsx)(n.p,{children:"Goroutines are lightweight, but they're not free: at minimum, they cost memory for their stack and CPU to be scheduled.\nWhile these costs are small for typical uses of goroutines, they can cause significant performance issues when spawned\nin large numbers without controlled lifetimes. Goroutines with unmanaged lifetimes can also cause other issues like\npreventing unused objects from being garbage collected and holding onto resources that are otherwise no longer used."}),"\n",(0,i.jsx)(n.p,{children:"In general, every goroutine:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"must have a predictable time at which it will stop running; or"}),"\n",(0,i.jsx)(n.li,{children:"there must be a way to signal to the goroutine that it should stop"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"In both cases, there must be a way code to block and wait for the goroutine to\nfinish."}),"\n",(0,i.jsx)(n.p,{children:"For example:"}),"\n",(0,i.jsxs)("table",{children:[(0,i.jsx)("thead",{children:(0,i.jsxs)("tr",{children:[(0,i.jsx)("th",{children:"Bad"}),(0,i.jsx)("th",{children:"Good"})]})}),(0,i.jsxs)("tbody",{children:[(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"go func() {\n  for {\n    flush()\n    time.Sleep(delay)\n  }\n}()\n"})})}),(0,i.jsx)("td",{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"var (\n  stop = make(chan struct{}) // tells the goroutine to stop\n  done = make(chan struct{}) // tells us that the goroutine exited\n)\ngo func() {\n  defer close(done)\n\n  ticker := time.NewTicker(delay)\n  defer ticker.Stop()\n  for {\n    select {\n    case <-ticker.C:\n      flush()\n    case <-stop:\n      return\n    }\n  }\n}()\n\n// Elsewhere...\nclose(stop)  // signal the goroutine to stop\n<-done       // and wait for it to exit\n"})})})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)(n.p,{children:"There's no way to stop this goroutine. This will run until the application exits."})}),(0,i.jsx)("td",{children:(0,i.jsxs)(n.p,{children:["This goroutine can be stopped with ",(0,i.jsx)(n.code,{children:"close(stop)"}),", and we can wait for it to exit with ",(0,i.jsx)(n.code,{children:"<-done"}),"."]})})]})]})]}),"\n",(0,i.jsx)(n.h4,{id:"wait-for-goroutines-to-exit",children:"Wait for goroutines to exit"}),"\n",(0,i.jsx)(n.p,{children:"Given a goroutine spawned by the system, there must be a way to wait for the goroutine to exit. There are two popular\nways to do this:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Use a ",(0,i.jsx)(n.code,{children:"sync.WaitGroup"}),". Do this if there are multiple goroutines that you want to wait for"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"var wg sync.WaitGroup\nfor i := 0; i < N; i++ {\n  wg.Add(1)\n  go func() {\n    defer wg.Done()\n    // ...\n  }()\n}\n\n// To wait for all to finish:\nwg.Wait()\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Add another ",(0,i.jsx)(n.code,{children:"chan struct{}"})," that the goroutine closes when it's done. Do this if there's only one goroutine."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"done := make(chan struct{})\ngo func() {\n  defer close(done)\n  // ...\n}()\n\n// To wait for the goroutine to finish:\n<-done\n"})}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.h4,{id:"no-goroutines-in-init",children:["No goroutines in ",(0,i.jsx)(n.code,{children:"init()"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"init()"})," functions should not spawn goroutines. See also ",(0,i.jsx)(n.a,{href:"#avoid-init",children:"Avoid init()"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["If a package has need of a background goroutine, it must expose an object that is responsible for managing a goroutine's\nlifetime.\nThe object must provide a method (",(0,i.jsx)(n.code,{children:"Close"}),", ",(0,i.jsx)(n.code,{children:"Stop"}),", ",(0,i.jsx)(n.code,{children:"Shutdown"}),", etc) that signals the background goroutine to stop, and\nwaits for it to exit."]}),"\n",(0,i.jsxs)("table",{children:[(0,i.jsx)("thead",{children:(0,i.jsxs)("tr",{children:[(0,i.jsx)("th",{children:"Bad"}),(0,i.jsx)("th",{children:"Good"})]})}),(0,i.jsxs)("tbody",{children:[(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"func init() {\n  go doWork()\n}\n\nfunc doWork() {\n  for {\n    // ...\n  }\n}\n"})})}),(0,i.jsx)("td",{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"type Worker struct{ /* ... */ }\n\nfunc NewWorker(...) *Worker {\n  w := &Worker{\n    stop: make(chan struct{}),\n    done: make(chan struct{}),\n    // ...\n  }\n  go w.doWork()\n}\n\nfunc (w *Worker) doWork() {\n  defer close(w.done)\n  for {\n    // ...\n    case <-w.stop:\n      return\n  }\n}\n\n// Shutdown tells the worker to stop\n// and waits until it has finished.\nfunc (w *Worker) Shutdown() {\n  close(w.stop)\n  <-w.done\n}\n"})})})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)(n.p,{children:"Spawns a background goroutine unconditionally when the user exports this package.\nThe user has no control over the goroutine or a means of stopping it."})}),(0,i.jsxs)("td",{children:[(0,i.jsx)(n.p,{children:"Spawns the worker only if the user requests it.\nProvides a means of shutting down the worker so that the user can free up resources used by the worker."}),(0,i.jsxs)(n.p,{children:["Note that you should use ",(0,i.jsx)(n.code,{children:"WaitGroup"}),"s if the worker manages multiple goroutines.\nSee ",(0,i.jsx)(n.a,{href:"#wait-for-goroutines-to-exit",children:"Wait for goroutines to exit"}),"."]})]})]})]})]}),"\n",(0,i.jsx)(n.h2,{id:"performance",children:"Performance"}),"\n",(0,i.jsx)(n.p,{children:"Performance-specific guidelines apply only to the hot path."}),"\n",(0,i.jsx)(n.h3,{id:"prefer-strconv-over-fmt",children:"Prefer strconv over fmt"}),"\n",(0,i.jsxs)(n.p,{children:["When converting primitives to/from strings, ",(0,i.jsx)(n.code,{children:"strconv"})," is faster than\n",(0,i.jsx)(n.code,{children:"fmt"}),"."]}),"\n",(0,i.jsxs)("table",{children:[(0,i.jsx)("thead",{children:(0,i.jsxs)("tr",{children:[(0,i.jsx)("th",{children:"Bad"}),(0,i.jsx)("th",{children:"Good"})]})}),(0,i.jsxs)("tbody",{children:[(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"for i := 0; i < b.N; i++ {\n  s := fmt.Sprint(rand.Int())\n}\n"})})}),(0,i.jsx)("td",{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"for i := 0; i < b.N; i++ {\n  s := strconv.Itoa(rand.Int())\n}\n"})})})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-plain",children:"BenchmarkFmtSprint-4    143 ns/op    2 allocs/op\n"})})}),(0,i.jsx)("td",{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-plain",children:"BenchmarkStrconv-4    64.2 ns/op    1 allocs/op\n"})})})]})]})]}),"\n",(0,i.jsx)(n.h3,{id:"avoid-repeated-string-to-byte-conversions",children:"Avoid repeated string-to-byte conversions"}),"\n",(0,i.jsx)(n.p,{children:"Do not create byte slices from a fixed string repeatedly. Instead, perform the conversion once and capture the result."}),"\n",(0,i.jsxs)("table",{children:[(0,i.jsx)("thead",{children:(0,i.jsxs)("tr",{children:[(0,i.jsx)("th",{children:"Bad"}),(0,i.jsx)("th",{children:"Good"})]})}),(0,i.jsxs)("tbody",{children:[(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'for i := 0; i < b.N; i++ {\n  w.Write([]byte("Hello world"))\n}\n'})})}),(0,i.jsx)("td",{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'data := []byte("Hello world")\nfor i := 0; i < b.N; i++ {\n  w.Write(data)\n}\n'})})})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-plain",children:"BenchmarkBad-4   50000000   22.2 ns/op\n"})})}),(0,i.jsx)("td",{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-plain",children:"BenchmarkGood-4  500000000   3.25 ns/op\n"})})})]})]})]}),"\n",(0,i.jsx)(n.h3,{id:"prefer-specifying-container-capacity",children:"Prefer Specifying Container Capacity"}),"\n",(0,i.jsx)(n.p,{children:"Specify container capacity where possible in order to allocate memory for the container up front. This minimizes\nsubsequent allocations (by copying and resizing of the container) as elements are added."}),"\n",(0,i.jsx)(n.h4,{id:"specifying-map-capacity-hints",children:"Specifying Map Capacity Hints"}),"\n",(0,i.jsxs)(n.p,{children:["Where possible, provide capacity hints when initializing maps with ",(0,i.jsx)(n.code,{children:"make()"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"make(map[T1]T2, hint)\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Providing a capacity hint to ",(0,i.jsx)(n.code,{children:"make()"})," tries to right-size the map at initialization time, which reduces the need for\ngrowing the map and allocations as elements are added to the map."]}),"\n",(0,i.jsx)(n.p,{children:"Note that, unlike slices, map capacity hints do not guarantee complete, preemptive allocation, but are used to\napproximate the number of hashmap buckets required. Consequently, allocations may still occur when adding elements to\nthe map, even up to the specified capacity."}),"\n",(0,i.jsxs)("table",{children:[(0,i.jsx)("thead",{children:(0,i.jsxs)("tr",{children:[(0,i.jsx)("th",{children:"Bad"}),(0,i.jsx)("th",{children:"Good"})]})}),(0,i.jsxs)("tbody",{children:[(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'m := make(map[string]os.FileInfo)\n\nfiles, _ := os.ReadDir("./files")\nfor _, f := range files {\n    m[f.Name()] = f\n}\n'})})}),(0,i.jsx)("td",{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'\nfiles, _ := os.ReadDir("./files")\n\nm := make(map[string]os.DirEntry, len(files))\nfor _, f := range files {\n    m[f.Name()] = f\n}\n'})})})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"m"})," is created without a size hint; there may be more allocations at assignment time."]})}),(0,i.jsx)("td",{children:(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"m"})," is created with a size hint; there may be fewer allocations at assignment time."]})})]})]})]}),"\n",(0,i.jsx)(n.h4,{id:"specifying-slice-capacity",children:"Specifying Slice Capacity"}),"\n",(0,i.jsxs)(n.p,{children:["Where possible, provide capacity hints when initializing slices with ",(0,i.jsx)(n.code,{children:"make()"}),", particularly when appending."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"make([]T, length, capacity)\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Unlike maps, slice capacity is not a hint: the compiler will allocate enough memory for the capacity of the slice as\nprovided to ",(0,i.jsx)(n.code,{children:"make()"}),", which means that subsequent ",(0,i.jsx)(n.code,{children:"append()"})," operations will incur zero allocations (until the length of\nthe slice matches the capacity, after which any appends will require a resize to hold additional elements)."]}),"\n",(0,i.jsxs)("table",{children:[(0,i.jsx)("thead",{children:(0,i.jsxs)("tr",{children:[(0,i.jsx)("th",{children:"Bad"}),(0,i.jsx)("th",{children:"Good"})]})}),(0,i.jsxs)("tbody",{children:[(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"for n := 0; n < b.N; n++ {\n  data := make([]int, 0)\n  for k := 0; k < size; k++{\n    data = append(data, k)\n  }\n}\n"})})}),(0,i.jsx)("td",{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"for n := 0; n < b.N; n++ {\n  data := make([]int, 0, size)\n  for k := 0; k < size; k++{\n    data = append(data, k)\n  }\n}\n"})})})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-plain",children:"BenchmarkBad-4    100000000    2.48s\n"})})}),(0,i.jsx)("td",{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-plain",children:"BenchmarkGood-4   100000000    0.21s\n"})})})]})]})]}),"\n",(0,i.jsx)(n.h2,{id:"style",children:"Style"}),"\n",(0,i.jsx)(n.h3,{id:"avoid-overly-long-lines",children:"Avoid overly long lines"}),"\n",(0,i.jsx)(n.p,{children:"Avoid lines of code that require readers to scroll horizontally or turn their heads too much."}),"\n",(0,i.jsxs)(n.p,{children:["We recommend a line length limit of ",(0,i.jsx)(n.strong,{children:"120 characters"}),".\nAuthors should aim to wrap lines before hitting this limit."]}),"\n",(0,i.jsx)(n.h3,{id:"be-consistent",children:"Be Consistent"}),"\n",(0,i.jsx)(n.p,{children:"Some of the guidelines outlined in this document can be evaluated objectively; others are situational, contextual, or\nsubjective."}),"\n",(0,i.jsxs)(n.p,{children:["Above all else, ",(0,i.jsx)(n.strong,{children:"be consistent"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"Consistent code is easier to maintain, is easier to rationalize, requires less cognitive overhead, and is easier to\nmigrate or update as new conventions emerge or classes of bugs are fixed."}),"\n",(0,i.jsx)(n.p,{children:"Conversely, having multiple disparate or conflicting styles within a single codebase causes maintenance overhead,\nuncertainty, and cognitive dissonance, all of which can directly contribute to lower velocity, painful code reviews, and\nbugs."}),"\n",(0,i.jsx)(n.p,{children:"When applying these guidelines to a codebase, it is recommended that changes are made at a package (or larger) level:\napplication at a sub-package level violates the above concern by introducing multiple styles into the same code."}),"\n",(0,i.jsx)(n.h3,{id:"group-similar-declarations",children:"Group Similar Declarations"}),"\n",(0,i.jsx)(n.p,{children:"Go supports grouping similar declarations."}),"\n",(0,i.jsxs)("table",{children:[(0,i.jsx)("thead",{children:(0,i.jsxs)("tr",{children:[(0,i.jsx)("th",{children:"Bad"}),(0,i.jsx)("th",{children:"Good"})]})}),(0,i.jsx)("tbody",{children:(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'import "a"\nimport "b"\n'})})}),(0,i.jsx)("td",{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'import (\n  "a"\n  "b"\n)\n'})})})]})})]}),"\n",(0,i.jsx)(n.p,{children:"This also applies to constants, variables, and type declarations."}),"\n",(0,i.jsxs)("table",{children:[(0,i.jsx)("thead",{children:(0,i.jsxs)("tr",{children:[(0,i.jsx)("th",{children:"Bad"}),(0,i.jsx)("th",{children:"Good"})]})}),(0,i.jsx)("tbody",{children:(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"\nconst a = 1\nconst b = 2\n\n\n\nvar a = 1\nvar b = 2\n\n\n\ntype Area float64\ntype Volume float64\n"})})}),(0,i.jsx)("td",{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"const (\n  a = 1\n  b = 2\n)\n\nvar (\n  a = 1\n  b = 2\n)\n\ntype (\n  Area float64\n  Volume float64\n)\n"})})})]})})]}),"\n",(0,i.jsx)(n.p,{children:"Only group related declarations. Do not group declarations that are unrelated."}),"\n",(0,i.jsxs)("table",{children:[(0,i.jsx)("thead",{children:(0,i.jsxs)("tr",{children:[(0,i.jsx)("th",{children:"Bad"}),(0,i.jsx)("th",{children:"Good"})]})}),(0,i.jsx)("tbody",{children:(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'type Operation int\n\nconst (\n  Add Operation = iota + 1\n  Subtract\n  Multiply\n  EnvVar = "MY_ENV"\n)\n'})})}),(0,i.jsx)("td",{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'type Operation int\n\nconst (\n  Add Operation = iota + 1\n  Subtract\n  Multiply\n)\n\nconst EnvVar = "MY_ENV"\n'})})})]})})]}),"\n",(0,i.jsx)(n.p,{children:"Groups are not limited in where they can be used. For example, you can use them inside of functions."}),"\n",(0,i.jsxs)("table",{children:[(0,i.jsx)("thead",{children:(0,i.jsxs)("tr",{children:[(0,i.jsx)("th",{children:"Bad"}),(0,i.jsx)("th",{children:"Good"})]})}),(0,i.jsx)("tbody",{children:(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"func f() string {\n  red := color.New(0xff0000)\n  green := color.New(0x00ff00)\n  blue := color.New(0x0000ff)\n\n  // ...\n}\n"})})}),(0,i.jsx)("td",{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"func f() string {\n  var (\n    red   = color.New(0xff0000)\n    green = color.New(0x00ff00)\n    blue  = color.New(0x0000ff)\n  )\n\n  // ...\n}\n"})})})]})})]}),"\n",(0,i.jsx)(n.p,{children:"Exception: Variable declarations, particularly inside functions, should be grouped together if declared adjacent to\nother variables. Do this for variables declared together even if they are unrelated."}),"\n",(0,i.jsxs)("table",{children:[(0,i.jsx)("thead",{children:(0,i.jsxs)("tr",{children:[(0,i.jsx)("th",{children:"Bad"}),(0,i.jsx)("th",{children:"Good"})]})}),(0,i.jsx)("tbody",{children:(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'func (c *client) request() {\n  caller := c.name\n  format := "json"\n  timeout := 5*time.Second\n  var err error\n\n  // ...\n}\n'})})}),(0,i.jsx)("td",{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'func (c *client) request() {\n  var (\n    caller  = c.name\n    format  = "json"\n    timeout = 5*time.Second\n    err error\n  )\n\n  // ...\n}\n'})})})]})})]}),"\n",(0,i.jsx)(n.h3,{id:"import-group-ordering",children:"Import Group Ordering"}),"\n",(0,i.jsx)(n.p,{children:"There should be two import groups:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Standard library"}),"\n",(0,i.jsx)(n.li,{children:"Everything else"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"This is the grouping applied by goimports by default."}),"\n",(0,i.jsxs)("table",{children:[(0,i.jsx)("thead",{children:(0,i.jsxs)("tr",{children:[(0,i.jsx)("th",{children:"Bad"}),(0,i.jsx)("th",{children:"Good"})]})}),(0,i.jsx)("tbody",{children:(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'import (\n  "fmt"\n  "os"\n  "go.uber.org/atomic"\n  "golang.org/x/sync/errgroup"\n)\n'})})}),(0,i.jsx)("td",{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'import (\n  "fmt"\n  "os"\n\n  "go.uber.org/atomic"\n  "golang.org/x/sync/errgroup"\n)\n'})})})]})})]}),"\n",(0,i.jsx)(n.h3,{id:"package-names",children:"Package Names"}),"\n",(0,i.jsx)(n.p,{children:"When naming packages, choose a name that is:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"All lower-case. No capitals or underscores."}),"\n",(0,i.jsx)(n.li,{children:"Does not need to be renamed using named imports at most call sites."}),"\n",(0,i.jsx)(n.li,{children:"Short and succinct. Remember that the name is identified in full at every call site."}),"\n",(0,i.jsxs)(n.li,{children:["Not plural. For example, ",(0,i.jsx)(n.code,{children:"net/url"}),", not ",(0,i.jsx)(n.code,{children:"net/urls"}),"."]}),"\n",(0,i.jsx)(n.li,{children:'Not "common", "util", "shared", or "lib". These are bad, uninformative names.'}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["See also ",(0,i.jsx)(n.a,{href:"https://go.dev/blog/package-names",children:"Package Names"})," and ",(0,i.jsx)(n.a,{href:"https://rakyll.org/style-packages/",children:"Style guideline for Go packages"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"function-names",children:"Function Names"}),"\n",(0,i.jsxs)(n.p,{children:["We follow the Go community's convention of\nusing ",(0,i.jsx)(n.a,{href:"https://go.dev/doc/effective_go#mixed-caps",children:"MixedCaps for function names"}),". An exception is made for test\nfunctions, which may contain underscores for the purpose of grouping related test cases,\ne.g., ",(0,i.jsx)(n.code,{children:"TestMyFunction_WhatIsBeingTested"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"import-aliasing",children:"Import Aliasing"}),"\n",(0,i.jsx)(n.p,{children:"Import aliasing must be used if the package name does not match the last element of the import path."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'import (\n  "net/http"\n\n  client "example.com/client-go"\n  trace "example.com/trace/v2"\n)\n'})}),"\n",(0,i.jsx)(n.p,{children:"In all other scenarios, import aliases should be avoided unless there is a direct conflict between imports."}),"\n",(0,i.jsxs)("table",{children:[(0,i.jsx)("thead",{children:(0,i.jsxs)("tr",{children:[(0,i.jsx)("th",{children:"Bad"}),(0,i.jsx)("th",{children:"Good"})]})}),(0,i.jsx)("tbody",{children:(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'import (\n  "fmt"\n  "os"\n\n\n  nettrace "golang.net/x/trace"\n)\n'})})}),(0,i.jsx)("td",{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'import (\n  "fmt"\n  "os"\n  "runtime/trace"\n\n  nettrace "golang.net/x/trace"\n)\n'})})})]})})]}),"\n",(0,i.jsx)(n.h3,{id:"function-grouping-and-ordering",children:"Function Grouping and Ordering"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Functions should be sorted in rough call order."}),"\n",(0,i.jsx)(n.li,{children:"Functions in a file should be grouped by receiver."}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["Therefore, exported functions should appear first in a file, after ",(0,i.jsx)(n.code,{children:"struct"}),", ",(0,i.jsx)(n.code,{children:"const"}),", ",(0,i.jsx)(n.code,{children:"var"})," definitions."]}),"\n",(0,i.jsxs)(n.p,{children:["A ",(0,i.jsx)(n.code,{children:"newXYZ()"}),"/",(0,i.jsx)(n.code,{children:"NewXYZ()"})," may appear after the type is defined, but before the rest of the methods on the receiver."]}),"\n",(0,i.jsx)(n.p,{children:"Since functions are grouped by receiver, plain utility functions should appear towards the end of the file."}),"\n",(0,i.jsxs)("table",{children:[(0,i.jsx)("thead",{children:(0,i.jsxs)("tr",{children:[(0,i.jsx)("th",{children:"Bad"}),(0,i.jsx)("th",{children:"Good"})]})}),(0,i.jsx)("tbody",{children:(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"func (s *something) Cost() {\n  return calcCost(s.weights)\n}\n\ntype something struct{ ... }\n\nfunc calcCost(n []int) int {...}\n\nfunc (s *something) Stop() {...}\n\nfunc newSomething() *something {\n    return &something{}\n}\n"})})}),(0,i.jsx)("td",{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"type something struct{ ... }\n\nfunc newSomething() *something {\n    return &something{}\n}\n\nfunc (s *something) Cost() {\n  return calcCost(s.weights)\n}\n\nfunc (s *something) Stop() {...}\n\nfunc calcCost(n []int) int {...}\n"})})})]})})]}),"\n",(0,i.jsx)(n.h3,{id:"reduce-nesting",children:"Reduce Nesting"}),"\n",(0,i.jsx)(n.p,{children:"Code should reduce nesting where possible by handling error cases/special conditions first and returning early or\ncontinuing the loop. Reduce the amount of code that is nested multiple levels."}),"\n",(0,i.jsxs)("table",{children:[(0,i.jsx)("thead",{children:(0,i.jsxs)("tr",{children:[(0,i.jsx)("th",{children:"Bad"}),(0,i.jsx)("th",{children:"Good"})]})}),(0,i.jsx)("tbody",{children:(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'for _, v := range data {\n  if v.F1 == 1 {\n    v = process(v)\n    if err := v.Call(); err == nil {\n      v.Send()\n    } else {\n      return err\n    }\n  } else {\n    log.Printf("Invalid v: %v", v)\n  }\n}\n'})})}),(0,i.jsx)("td",{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'for _, v := range data {\n  if v.F1 != 1 {\n    log.Printf("Invalid v: %v", v)\n    continue\n  }\n\n  v = process(v)\n  if err := v.Call(); err != nil {\n    return err\n  }\n  v.Send()\n}\n'})})})]})})]}),"\n",(0,i.jsx)(n.h3,{id:"unnecessary-else",children:"Unnecessary Else"}),"\n",(0,i.jsx)(n.p,{children:"If a variable is set in both branches of an if, it can be replaced with a single if."}),"\n",(0,i.jsxs)("table",{children:[(0,i.jsx)("thead",{children:(0,i.jsxs)("tr",{children:[(0,i.jsx)("th",{children:"Bad"}),(0,i.jsx)("th",{children:"Good"})]})}),(0,i.jsx)("tbody",{children:(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"var a int\nif b {\n  a = 100\n} else {\n  a = 10\n}\n"})})}),(0,i.jsx)("td",{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"a := 10\nif b {\n  a = 100\n}\n"})})})]})})]}),"\n",(0,i.jsx)(n.h3,{id:"top-level-variable-declarations",children:"Top-level Variable Declarations"}),"\n",(0,i.jsxs)(n.p,{children:["At the top level, use the standard ",(0,i.jsx)(n.code,{children:"var"})," keyword. Do not specify the type, unless it is not the same type as the\nexpression."]}),"\n",(0,i.jsxs)("table",{children:[(0,i.jsx)("thead",{children:(0,i.jsxs)("tr",{children:[(0,i.jsx)("th",{children:"Bad"}),(0,i.jsx)("th",{children:"Good"})]})}),(0,i.jsx)("tbody",{children:(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'var _s string = F()\n\nfunc F() string { return "A" }\n'})})}),(0,i.jsx)("td",{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'var _s = F()\n// Since F already states that it returns a string, we don\'t need to specify\n// the type again.\n\nfunc F() string { return "A" }\n'})})})]})})]}),"\n",(0,i.jsx)(n.p,{children:"Specify the type if the type of the expression does not match the desired type exactly."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'type myError struct{}\n\nfunc (myError) Error() string { return "error" }\n\nfunc F() myError { return myError{} }\n\nvar _e error = F()\n// F returns an object of type myError but we want error.\n'})}),"\n",(0,i.jsx)(n.h3,{id:"prefix-unexported-globals-with-_",children:"Prefix Unexported Globals with _"}),"\n",(0,i.jsxs)(n.p,{children:["Prefix unexported top-level ",(0,i.jsx)(n.code,{children:"var"}),"s and ",(0,i.jsx)(n.code,{children:"const"}),"s with ",(0,i.jsx)(n.code,{children:"_"})," to make it clear when they are used that they are global\nsymbols."]}),"\n",(0,i.jsx)(n.p,{children:"Rationale: Top-level variables and constants have a package scope. Using a generic name makes it easy to accidentally\nuse the wrong value in a different file."}),"\n",(0,i.jsxs)("table",{children:[(0,i.jsx)("thead",{children:(0,i.jsxs)("tr",{children:[(0,i.jsx)("th",{children:"Bad"}),(0,i.jsx)("th",{children:"Good"})]})}),(0,i.jsx)("tbody",{children:(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'// foo.go\n\nconst (\n  defaultPort = 8080\n  defaultUser = "user"\n)\n\n// bar.go\n\nfunc Bar() {\n  defaultPort := 9090\n  ...\n  fmt.Println("Default port", defaultPort)\n\n  // We will not see a compile error if the first line of\n  // Bar() is deleted.\n}\n'})})}),(0,i.jsx)("td",{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'// foo.go\n\nconst (\n  _defaultPort = 8080\n  _defaultUser = "user"\n)\n'})})})]})})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Exception"}),": Unexported error values may use the prefix ",(0,i.jsx)(n.code,{children:"err"})," without the underscore.\nSee ",(0,i.jsx)(n.a,{href:"#error-naming",children:"Error Naming"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"embedding-in-structs",children:"Embedding in Structs"}),"\n",(0,i.jsx)(n.p,{children:"Embedded types should be at the top of the field list of a struct, and there must be an empty line separating embedded\nfields from regular fields."}),"\n",(0,i.jsxs)("table",{children:[(0,i.jsx)("thead",{children:(0,i.jsxs)("tr",{children:[(0,i.jsx)("th",{children:"Bad"}),(0,i.jsx)("th",{children:"Good"})]})}),(0,i.jsx)("tbody",{children:(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"type Client struct {\n  version int\n  http.Client\n}\n"})})}),(0,i.jsx)("td",{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"type Client struct {\n  http.Client\n\n  version int\n}\n"})})})]})})]}),"\n",(0,i.jsxs)(n.p,{children:["Embedding should provide tangible benefit, like adding or augmenting functionality in a semantically-appropriate way. It\nshould do this with zero adverse user-facing effects (see\nalso: ",(0,i.jsx)(n.a,{href:"#avoid-embedding-types-in-public-structs",children:"Avoid Embedding Types in Public Structs"}),")."]}),"\n",(0,i.jsxs)(n.p,{children:["Exception: Mutexes should not be embedded, even on unexported types.\nSee also: ",(0,i.jsx)(n.a,{href:"#zero-value-mutexes-are-valid",children:"Zero-value Mutexes are Valid"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["Embedding ",(0,i.jsx)(n.strong,{children:"should not"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Be purely cosmetic or convenience-oriented."}),"\n",(0,i.jsx)(n.li,{children:"Make outer types more difficult to construct or use."}),"\n",(0,i.jsx)(n.li,{children:"Affect outer types' zero values. If the outer type has a useful zero value, it should still have a useful zero value\nafter embedding the inner type."}),"\n",(0,i.jsx)(n.li,{children:"Expose unrelated functions or fields from the outer type as a side-effect of embedding the inner type."}),"\n",(0,i.jsx)(n.li,{children:"Expose unexported types."}),"\n",(0,i.jsx)(n.li,{children:"Affect outer types' copy semantics."}),"\n",(0,i.jsx)(n.li,{children:"Change the outer type's API or type semantics."}),"\n",(0,i.jsx)(n.li,{children:"Embed a non-canonical form of the inner type."}),"\n",(0,i.jsx)(n.li,{children:"Expose implementation details of the outer type."}),"\n",(0,i.jsx)(n.li,{children:"Allow users to observe or control type internals."}),"\n",(0,i.jsx)(n.li,{children:"Change the general behavior of inner functions through wrapping in a way that would reasonably surprise users."}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:'Simply put, embed consciously and intentionally. A good litmus test is, "would all of these exported inner\nmethods/fields be added directly to the outer type"; if the answer is "some" or "no", don\'t embed the inner type - use a\nfield instead.'}),"\n",(0,i.jsxs)("table",{children:[(0,i.jsx)("thead",{children:(0,i.jsxs)("tr",{children:[(0,i.jsx)("th",{children:"Bad"}),(0,i.jsx)("th",{children:"Good"})]})}),(0,i.jsxs)("tbody",{children:[(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"type A struct {\n    // Bad: A.Lock() and A.Unlock() are\n    //      now available, provide no\n    //      functional benefit, and allow\n    //      users to control details about\n    //      the internals of A.\n    sync.Mutex\n}\n"})})}),(0,i.jsx)("td",{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"type countingWriteCloser struct {\n    // Good: Write() is provided at this\n    //       outer layer for a specific\n    //       purpose, and delegates work\n    //       to the inner type's Write().\n    io.WriteCloser\n\n    count int\n}\n\nfunc (w *countingWriteCloser) Write(bs []byte) (int, error) {\n    w.count += len(bs)\n    return w.WriteCloser.Write(bs)\n}\n"})})})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"type Book struct {\n    // Bad: pointer changes zero value usefulness\n    io.ReadWriter\n\n    // other fields\n}\n\n// later\n\nvar b Book\nb.Read(...)  // panic: nil pointer\nb.String()   // panic: nil pointer\nb.Write(...) // panic: nil pointer\n"})})}),(0,i.jsx)("td",{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"type Book struct {\n    // Good: has useful zero value\n    bytes.Buffer\n\n    // other fields\n}\n\n// later\n\nvar b Book\nb.Read(...)  // ok\nb.String()   // ok\nb.Write(...) // ok\n"})})})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"type Client struct {\n    sync.Mutex\n    sync.WaitGroup\n    bytes.Buffer\n    url.URL\n}\n"})})}),(0,i.jsx)("td",{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"type Client struct {\n    mtx sync.Mutex\n    wg  sync.WaitGroup\n    buf bytes.Buffer\n    url url.URL\n}\n"})})})]})]})]}),"\n",(0,i.jsx)(n.h3,{id:"local-variable-declarations",children:"Local Variable Declarations"}),"\n",(0,i.jsxs)(n.p,{children:["Short variable declarations (",(0,i.jsx)(n.code,{children:":="}),") should be used if a variable is being set to some value explicitly."]}),"\n",(0,i.jsxs)("table",{children:[(0,i.jsx)("thead",{children:(0,i.jsxs)("tr",{children:[(0,i.jsx)("th",{children:"Bad"}),(0,i.jsx)("th",{children:"Good"})]})}),(0,i.jsx)("tbody",{children:(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'var s = "foo"\n'})})}),(0,i.jsx)("td",{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'s := "foo"\n'})})})]})})]}),"\n",(0,i.jsxs)(n.p,{children:["However, there are cases where the default value is clearer when the ",(0,i.jsx)(n.code,{children:"var"})," keyword is\nused. ",(0,i.jsx)(n.a,{href:"https://go.dev/wiki/CodeReviewComments#declaring-empty-slices",children:"Declaring Empty Slices"}),", for example."]}),"\n",(0,i.jsxs)("table",{children:[(0,i.jsx)("thead",{children:(0,i.jsxs)("tr",{children:[(0,i.jsx)("th",{children:"Bad"}),(0,i.jsx)("th",{children:"Good"})]})}),(0,i.jsx)("tbody",{children:(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"func f(list []int) {\n  filtered := []int{}\n  for _, v := range list {\n    if v > 10 {\n      filtered = append(filtered, v)\n    }\n  }\n}\n"})})}),(0,i.jsx)("td",{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"func f(list []int) {\n  var filtered []int\n  for _, v := range list {\n    if v > 10 {\n      filtered = append(filtered, v)\n    }\n  }\n}\n"})})})]})})]}),"\n",(0,i.jsx)(n.h3,{id:"nil-is-a-valid-slice",children:"nil is a valid slice"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"nil"})," is a valid slice of length 0. This means that,"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["You should not return a slice of length zero explicitly. Return ",(0,i.jsx)(n.code,{children:"nil"})," instead."]}),"\n",(0,i.jsxs)("table",{children:[(0,i.jsx)("thead",{children:(0,i.jsxs)("tr",{children:[(0,i.jsx)("th",{children:"Bad"}),(0,i.jsx)("th",{children:"Good"})]})}),(0,i.jsx)("tbody",{children:(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'if x == "" {\n  return []int{}\n}\n'})})}),(0,i.jsx)("td",{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'if x == "" {\n  return nil\n}\n'})})})]})})]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["To check if a slice is empty, always use ",(0,i.jsx)(n.code,{children:"len(s) == 0"}),". Do not check for ",(0,i.jsx)(n.code,{children:"nil"}),"."]}),"\n",(0,i.jsxs)("table",{children:[(0,i.jsx)("thead",{children:(0,i.jsxs)("tr",{children:[(0,i.jsx)("th",{children:"Bad"}),(0,i.jsx)("th",{children:"Good"})]})}),(0,i.jsx)("tbody",{children:(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"func isEmpty(s []string) bool {\n  return s == nil\n}\n"})})}),(0,i.jsx)("td",{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"func isEmpty(s []string) bool {\n  return len(s) == 0\n}\n"})})})]})})]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["The zero value (a slice declared with ",(0,i.jsx)(n.code,{children:"var"}),") is usable immediately without ",(0,i.jsx)(n.code,{children:"make()"}),"."]}),"\n",(0,i.jsxs)("table",{children:[(0,i.jsx)("thead",{children:(0,i.jsxs)("tr",{children:[(0,i.jsx)("th",{children:"Bad"}),(0,i.jsx)("th",{children:"Good"})]})}),(0,i.jsx)("tbody",{children:(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"nums := []int{}\n// or, nums := make([]int)\n\nif add1 {\n  nums = append(nums, 1)\n}\n\nif add2 {\n  nums = append(nums, 2)\n}\n"})})}),(0,i.jsx)("td",{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"var nums []int\n\nif add1 {\n  nums = append(nums, 1)\n}\n\nif add2 {\n  nums = append(nums, 2)\n}\n"})})})]})})]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Remember that, while it is a valid slice, a nil slice is not equivalent to an allocated slice of length 0 - one is nil\nand the other is not - and the two may be treated differently in different situations (such as serialization)."}),"\n",(0,i.jsx)(n.h3,{id:"reduce-scope-of-variables",children:"Reduce Scope of Variables"}),"\n",(0,i.jsxs)(n.p,{children:["Where possible, reduce scope of variables. Do not reduce the scope if it conflicts\nwith ",(0,i.jsx)(n.a,{href:"#reduce-nesting",children:"Reduce Nesting"}),"."]}),"\n",(0,i.jsxs)("table",{children:[(0,i.jsx)("thead",{children:(0,i.jsxs)("tr",{children:[(0,i.jsx)("th",{children:"Bad"}),(0,i.jsx)("th",{children:"Good"})]})}),(0,i.jsx)("tbody",{children:(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"err := os.WriteFile(name, data, 0644)\nif err != nil {\n return err\n}\n"})})}),(0,i.jsx)("td",{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"if err := os.WriteFile(name, data, 0644); err != nil {\n return err\n}\n"})})})]})})]}),"\n",(0,i.jsx)(n.p,{children:"If you need a result of a function call outside of the if, then you should not try to reduce the scope."}),"\n",(0,i.jsxs)("table",{children:[(0,i.jsx)("thead",{children:(0,i.jsxs)("tr",{children:[(0,i.jsx)("th",{children:"Bad"}),(0,i.jsx)("th",{children:"Good"})]})}),(0,i.jsx)("tbody",{children:(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"if data, err := os.ReadFile(name); err == nil {\n  err = cfg.Decode(data)\n  if err != nil {\n    return err\n  }\n\n  fmt.Println(cfg)\n  return nil\n} else {\n  return err\n}\n"})})}),(0,i.jsx)("td",{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"data, err := os.ReadFile(name)\nif err != nil {\n   return err\n}\n\nif err := cfg.Decode(data); err != nil {\n  return err\n}\n\nfmt.Println(cfg)\nreturn nil\n"})})})]})})]}),"\n",(0,i.jsx)(n.h3,{id:"use-raw-string-literals-to-avoid-escaping",children:"Use Raw String Literals to Avoid Escaping"}),"\n",(0,i.jsxs)(n.p,{children:["Go supports ",(0,i.jsx)(n.a,{href:"https://go.dev/ref/spec#raw_string_lit",children:"raw string literals"}),", which can span multiple lines and include\nquotes. Use these to avoid hand-escaped strings which are much harder to read."]}),"\n",(0,i.jsxs)("table",{children:[(0,i.jsx)("thead",{children:(0,i.jsxs)("tr",{children:[(0,i.jsx)("th",{children:"Bad"}),(0,i.jsx)("th",{children:"Good"})]})}),(0,i.jsx)("tbody",{children:(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'wantError := "unknown name:\\"test\\""\n'})})}),(0,i.jsx)("td",{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'wantError := `unknown error:"test"`\n'})})})]})})]}),"\n",(0,i.jsx)(n.h3,{id:"initializing-structs",children:"Initializing Structs"}),"\n",(0,i.jsx)(n.h4,{id:"use-field-names-to-initialize-structs",children:"Use Field Names to Initialize Structs"}),"\n",(0,i.jsxs)(n.p,{children:["You should almost always specify field names when initializing structs. This is now enforced\nby ",(0,i.jsx)(n.a,{href:"https://pkg.go.dev/cmd/vet",children:(0,i.jsx)(n.code,{children:"go vet"})}),"."]}),"\n",(0,i.jsxs)("table",{children:[(0,i.jsx)("thead",{children:(0,i.jsxs)("tr",{children:[(0,i.jsx)("th",{children:"Bad"}),(0,i.jsx)("th",{children:"Good"})]})}),(0,i.jsx)("tbody",{children:(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'k := User{"John", "Doe", true}\n'})})}),(0,i.jsx)("td",{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'k := User{\n    FirstName: "John",\n    LastName: "Doe",\n    Admin: true,\n}\n'})})})]})})]}),"\n",(0,i.jsxs)(n.p,{children:["Exception: Field names ",(0,i.jsx)(n.em,{children:"may"})," be omitted in test tables when there are 3 or fewer fields."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'tests := []struct{\n  op Operation\n  want string\n}{\n  {Add, "add"},\n  {Subtract, "subtract"},\n}\n'})}),"\n",(0,i.jsx)(n.h4,{id:"omit-zero-value-fields-in-structs",children:"Omit Zero Value Fields in Structs"}),"\n",(0,i.jsx)(n.p,{children:"When initializing structs with field names, omit fields that have zero values unless they provide meaningful context.\nOtherwise, let Go set these to zero values automatically."}),"\n",(0,i.jsxs)("table",{children:[(0,i.jsx)("thead",{children:(0,i.jsxs)("tr",{children:[(0,i.jsx)("th",{children:"Bad"}),(0,i.jsx)("th",{children:"Good"})]})}),(0,i.jsx)("tbody",{children:(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'user := User{\n  FirstName: "John",\n  LastName: "Doe",\n  MiddleName: "",\n  Admin: false,\n}\n'})})}),(0,i.jsx)("td",{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'user := User{\n  FirstName: "John",\n  LastName: "Doe",\n}\n'})})})]})})]}),"\n",(0,i.jsx)(n.p,{children:"This helps reduce noise for readers by omitting values that are default in that context. Only meaningful values are\nspecified."}),"\n",(0,i.jsxs)(n.p,{children:["Include zero values where field names provide meaningful context. For example, test cases in ",(0,i.jsx)(n.a,{href:"#test-tables",children:"Test Tables"}),"\ncan benefit from names of fields even when they are zero-valued."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'tests := []struct{\n  give string\n  want int\n}{\n  {give: "0", want: 0},\n  // ...\n}\n'})}),"\n",(0,i.jsxs)(n.h4,{id:"use-var-for-zero-value-structs",children:["Use ",(0,i.jsx)(n.code,{children:"var"})," for Zero Value Structs"]}),"\n",(0,i.jsxs)(n.p,{children:["When all the fields of a struct are omitted in a declaration, use the ",(0,i.jsx)(n.code,{children:"var"})," form to declare the struct."]}),"\n",(0,i.jsxs)("table",{children:[(0,i.jsx)("thead",{children:(0,i.jsxs)("tr",{children:[(0,i.jsx)("th",{children:"Bad"}),(0,i.jsx)("th",{children:"Good"})]})}),(0,i.jsx)("tbody",{children:(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"user := User{}\n"})})}),(0,i.jsx)("td",{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"var user User\n"})})})]})})]}),"\n",(0,i.jsxs)(n.p,{children:["This differentiates zero valued structs from those with non-zero fields similar to the distinction created\nfor ",(0,i.jsx)(n.a,{href:"#initializing-maps",children:"map initialization"}),", and matches how we prefer\nto ",(0,i.jsx)(n.a,{href:"https://go.dev/wiki/CodeReviewComments#declaring-empty-slices",children:"declare empty slices"}),"."]}),"\n",(0,i.jsx)(n.h4,{id:"initializing-struct-references",children:"Initializing Struct References"}),"\n",(0,i.jsxs)(n.p,{children:["Use ",(0,i.jsx)(n.code,{children:"&T{}"})," instead of ",(0,i.jsx)(n.code,{children:"new(T)"})," when initializing struct references so that it is consistent with the struct\ninitialization."]}),"\n",(0,i.jsxs)("table",{children:[(0,i.jsx)("thead",{children:(0,i.jsxs)("tr",{children:[(0,i.jsx)("th",{children:"Bad"}),(0,i.jsx)("th",{children:"Good"})]})}),(0,i.jsx)("tbody",{children:(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'sval := T{Name: "foo"}\n\n// inconsistent\nsptr := new(T)\nsptr.Name = "bar"\n'})})}),(0,i.jsx)("td",{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'sval := T{Name: "foo"}\n\nsptr := &T{Name: "bar"}\n'})})})]})})]}),"\n",(0,i.jsx)(n.h3,{id:"initializing-maps",children:"Initializing Maps"}),"\n",(0,i.jsxs)(n.p,{children:["Prefer ",(0,i.jsx)(n.code,{children:"make(..)"})," for empty maps, and maps populated programmatically. This makes map initialization visually distinct\nfrom declaration, and it makes it easy to add size hints later if available."]}),"\n",(0,i.jsxs)("table",{children:[(0,i.jsx)("thead",{children:(0,i.jsxs)("tr",{children:[(0,i.jsx)("th",{children:"Bad"}),(0,i.jsx)("th",{children:"Good"})]})}),(0,i.jsxs)("tbody",{children:[(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"var (\n  // m1 is safe to read and write;\n  // m2 will panic on writes.\n  m1 = map[T1]T2{}\n  m2 map[T1]T2\n)\n"})})}),(0,i.jsx)("td",{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"var (\n  // m1 is safe to read and write;\n  // m2 will panic on writes.\n  m1 = make(map[T1]T2)\n  m2 map[T1]T2\n)\n"})})})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)(n.p,{children:"Declaration and initialization are visually similar."})}),(0,i.jsx)("td",{children:(0,i.jsx)(n.p,{children:"Declaration and initialization are visually distinct."})})]})]})]}),"\n",(0,i.jsxs)(n.p,{children:["Where possible, provide capacity hints when initializing maps with ",(0,i.jsx)(n.code,{children:"make()"}),".\nSee ",(0,i.jsx)(n.a,{href:"#specifying-map-capacity-hints",children:"Specifying Map Capacity Hints"})," for more information."]}),"\n",(0,i.jsx)(n.p,{children:"On the other hand, if the map holds a fixed list of elements, use map literals to initialize the map."}),"\n",(0,i.jsxs)("table",{children:[(0,i.jsx)("thead",{children:(0,i.jsxs)("tr",{children:[(0,i.jsx)("th",{children:"Bad"}),(0,i.jsx)("th",{children:"Good"})]})}),(0,i.jsx)("tbody",{children:(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"m := make(map[T1]T2, 3)\nm[k1] = v1\nm[k2] = v2\nm[k3] = v3\n"})})}),(0,i.jsx)("td",{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"m := map[T1]T2{\n  k1: v1,\n  k2: v2,\n  k3: v3,\n}\n"})})})]})})]}),"\n",(0,i.jsxs)(n.p,{children:["The basic rule of thumb is to use map literals when adding a fixed set of elements at initialization time, otherwise\nuse ",(0,i.jsx)(n.code,{children:"make"})," (and specify a size hint if available)."]}),"\n",(0,i.jsx)(n.h3,{id:"format-strings-outside-printf",children:"Format Strings outside Printf"}),"\n",(0,i.jsxs)(n.p,{children:["If you declare format strings for ",(0,i.jsx)(n.code,{children:"Printf"}),"-style functions outside a string literal, make them ",(0,i.jsx)(n.code,{children:"const"})," values."]}),"\n",(0,i.jsxs)(n.p,{children:["This helps ",(0,i.jsx)(n.code,{children:"go vet"})," perform static analysis of the format string."]}),"\n",(0,i.jsxs)("table",{children:[(0,i.jsx)("thead",{children:(0,i.jsxs)("tr",{children:[(0,i.jsx)("th",{children:"Bad"}),(0,i.jsx)("th",{children:"Good"})]})}),(0,i.jsx)("tbody",{children:(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'msg := "unexpected values %v, %v\\n"\nfmt.Printf(msg, 1, 2)\n'})})}),(0,i.jsx)("td",{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'const msg = "unexpected values %v, %v\\n"\nfmt.Printf(msg, 1, 2)\n'})})})]})})]}),"\n",(0,i.jsx)(n.h3,{id:"naming-printf-style-functions",children:"Naming Printf-style Functions"}),"\n",(0,i.jsxs)(n.p,{children:["When you declare a ",(0,i.jsx)(n.code,{children:"Printf"}),"-style function, make sure that ",(0,i.jsx)(n.code,{children:"go vet"})," can detect it and check the format string."]}),"\n",(0,i.jsxs)(n.p,{children:["This means that you should use predefined ",(0,i.jsx)(n.code,{children:"Printf"}),"-style function names if possible. ",(0,i.jsx)(n.code,{children:"go vet"})," will check these by\ndefault. See ",(0,i.jsx)(n.a,{href:"https://pkg.go.dev/cmd/vet#hdr-Printf_family",children:"Printf family"})," for more information."]}),"\n",(0,i.jsxs)(n.p,{children:["If using the predefined names is not an option, end the name you choose with f: ",(0,i.jsx)(n.code,{children:"Wrapf"}),", not ",(0,i.jsx)(n.code,{children:"Wrap"}),". ",(0,i.jsx)(n.code,{children:"go vet"})," can be\nasked to check specific ",(0,i.jsx)(n.code,{children:"Printf"}),"-style names but they must end with f."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",children:"go vet -printfuncs=wrapf,statusf\n"})}),"\n",(0,i.jsxs)(n.p,{children:["See also ",(0,i.jsx)(n.a,{href:"https://kuzminva.wordpress.com/2017/11/07/go-vet-printf-family-check/",children:"go vet: Printf family check"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"patterns",children:"Patterns"}),"\n",(0,i.jsx)(n.h3,{id:"test-tables",children:"Test Tables"}),"\n",(0,i.jsxs)(n.p,{children:["Table-driven tests with ",(0,i.jsx)(n.a,{href:"https://go.dev/blog/subtests",children:"subtests"})," can be a helpful pattern for writing tests to avoid\nduplicating code when the core test logic is repetitive."]}),"\n",(0,i.jsxs)(n.p,{children:["If a system under test needs to be tested against ",(0,i.jsx)(n.em,{children:"multiple conditions"})," where certain parts of the the inputs and\noutputs change, a table-driven test should be used to reduce redundancy and improve readability."]}),"\n",(0,i.jsxs)("table",{children:[(0,i.jsx)("thead",{children:(0,i.jsxs)("tr",{children:[(0,i.jsx)("th",{children:"Bad"}),(0,i.jsx)("th",{children:"Good"})]})}),(0,i.jsx)("tbody",{children:(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'// func TestSplitHostPort(t *testing.T)\n\nhost, port, err := net.SplitHostPort("192.0.2.0:8000")\nrequire.NoError(t, err)\nassert.Equal(t, "192.0.2.0", host)\nassert.Equal(t, "8000", port)\n\nhost, port, err = net.SplitHostPort("192.0.2.0:http")\nrequire.NoError(t, err)\nassert.Equal(t, "192.0.2.0", host)\nassert.Equal(t, "http", port)\n\nhost, port, err = net.SplitHostPort(":8000")\nrequire.NoError(t, err)\nassert.Equal(t, "", host)\nassert.Equal(t, "8000", port)\n\nhost, port, err = net.SplitHostPort("1:8")\nrequire.NoError(t, err)\nassert.Equal(t, "1", host)\nassert.Equal(t, "8", port)\n'})})}),(0,i.jsx)("td",{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'// func TestSplitHostPort(t *testing.T)\n\ntests := []struct{\n  give     string\n  wantHost string\n  wantPort string\n}{\n  {\n    give:     "192.0.2.0:8000",\n    wantHost: "192.0.2.0",\n    wantPort: "8000",\n  },\n  {\n    give:     "192.0.2.0:http",\n    wantHost: "192.0.2.0",\n    wantPort: "http",\n  },\n  {\n    give:     ":8000",\n    wantHost: "",\n    wantPort: "8000",\n  },\n  {\n    give:     "1:8",\n    wantHost: "1",\n    wantPort: "8",\n  },\n}\n\nfor _, tt := range tests {\n  t.Run(tt.give, func(t *testing.T) {\n    host, port, err := net.SplitHostPort(tt.give)\n    require.NoError(t, err)\n    assert.Equal(t, tt.wantHost, host)\n    assert.Equal(t, tt.wantPort, port)\n  })\n}\n'})})})]})})]}),"\n",(0,i.jsx)(n.p,{children:"Test tables make it easier to add context to error messages, reduce duplicate logic, and add new test cases."}),"\n",(0,i.jsxs)(n.p,{children:["We follow the convention that the slice of structs is referred to as ",(0,i.jsx)(n.code,{children:"tests"})," and each test case ",(0,i.jsx)(n.code,{children:"tt"}),". Further, we\nencourage explicating the input and output values for each test case with ",(0,i.jsx)(n.code,{children:"give"})," and ",(0,i.jsx)(n.code,{children:"want"})," prefixes."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"tests := []struct{\n  give     string\n  wantHost string\n  wantPort string\n}{\n  // ...\n}\n\nfor _, tt := range tests {\n  // ...\n}\n"})}),"\n",(0,i.jsx)(n.h4,{id:"avoid-unnecessary-complexity-in-table-tests",children:"Avoid Unnecessary Complexity in Table Tests"}),"\n",(0,i.jsxs)(n.p,{children:["Table tests can be difficult to read and maintain if the subtests contain conditional assertions or other branching\nlogic. Table tests should ",(0,i.jsx)(n.strong,{children:"NOT"})," be used whenever there needs to be complex or conditional logic inside subtests (i.e.\ncomplex logic inside the ",(0,i.jsx)(n.code,{children:"for"})," loop)."]}),"\n",(0,i.jsx)(n.p,{children:"Large, complex table tests harm readability and maintainability because test readers may have difficulty debugging test\nfailures that occur."}),"\n",(0,i.jsxs)(n.p,{children:["Table tests like this should be split into either multiple test tables or multiple individual ",(0,i.jsx)(n.code,{children:"Test..."})," functions."]}),"\n",(0,i.jsx)(n.p,{children:"Some ideals to aim for are:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Focus on the narrowest unit of behavior"}),"\n",(0,i.jsx)(n.li,{children:'Minimize "test depth", and avoid conditional assertions (see below)'}),"\n",(0,i.jsx)(n.li,{children:"Ensure that all table fields are used in all tests"}),"\n",(0,i.jsx)(n.li,{children:"Ensure that all test logic runs for all table cases"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:'In this context, "test depth" means "within a given test, the number of successive assertions that require previous\nassertions to hold" (similar to cyclomatic complexity).\nHaving "shallower" tests means that there are fewer relationships between assertions and, more importantly, that those\nassertions are less likely to be conditional by default.'}),"\n",(0,i.jsxs)(n.p,{children:["Concretely, table tests can become confusing and difficult to read if they use multiple branching pathways (\ne.g. ",(0,i.jsx)(n.code,{children:"shouldError"}),", ",(0,i.jsx)(n.code,{children:"expectCall"}),", etc.), use many ",(0,i.jsx)(n.code,{children:"if"})," statements for specific mock expectations (e.g. ",(0,i.jsx)(n.code,{children:"shouldCallFoo"}),"),\nor place functions inside the table (e.g. ",(0,i.jsx)(n.code,{children:"setupMocks func(*FooMock)"}),")."]}),"\n",(0,i.jsx)(n.p,{children:"However, when testing behavior that only changes based on changed input, it may be preferable to group similar cases\ntogether in a table test to better illustrate how behavior changes across all inputs, rather than splitting otherwise\ncomparable units into separate tests and making them harder to compare and contrast."}),"\n",(0,i.jsxs)(n.p,{children:["If the test body is short and straightforward, it's acceptable to have a single branching pathway for success versus\nfailure cases with a table field like ",(0,i.jsx)(n.code,{children:"shouldErr"})," to specify error expectations."]}),"\n",(0,i.jsxs)("table",{children:[(0,i.jsx)("thead",{children:(0,i.jsxs)("tr",{children:[(0,i.jsx)("th",{children:"Bad"}),(0,i.jsx)("th",{children:"Good"})]})}),(0,i.jsx)("tbody",{children:(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"func TestComplicatedTable(t *testing.T) {\n  tests := []struct {\n    give          string\n    want          string\n    wantErr       error\n    shouldCallX   bool\n    shouldCallY   bool\n    giveXResponse string\n    giveXErr      error\n    giveYResponse string\n    giveYErr      error\n  }{\n    // ...\n  }\n\n  for _, tt := range tests {\n    t.Run(tt.give, func(t *testing.T) {\n      // setup mocks\n      ctrl := gomock.NewController(t)\n      xMock := xmock.NewMockX(ctrl)\n      if tt.shouldCallX {\n        xMock.EXPECT().Call().Return(\n          tt.giveXResponse, tt.giveXErr,\n        )\n      }\n      yMock := ymock.NewMockY(ctrl)\n      if tt.shouldCallY {\n        yMock.EXPECT().Call().Return(\n          tt.giveYResponse, tt.giveYErr,\n        )\n      }\n\n      got, err := DoComplexThing(tt.give, xMock, yMock)\n\n      // verify results\n      if tt.wantErr != nil {\n        require.EqualError(t, err, tt.wantErr)\n        return\n      }\n      require.NoError(t, err)\n      assert.Equal(t, want, got)\n    })\n  }\n}\n"})})}),(0,i.jsx)("td",{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'func TestShouldCallX(t *testing.T) {\n  // setup mocks\n  ctrl := gomock.NewController(t)\n  xMock := xmock.NewMockX(ctrl)\n  xMock.EXPECT().Call().Return("XResponse", nil)\n\n  yMock := ymock.NewMockY(ctrl)\n\n  got, err := DoComplexThing("inputX", xMock, yMock)\n\n  require.NoError(t, err)\n  assert.Equal(t, "want", got)\n}\n\nfunc TestShouldCallYAndFail(t *testing.T) {\n  // setup mocks\n  ctrl := gomock.NewController(t)\n  xMock := xmock.NewMockX(ctrl)\n\n  yMock := ymock.NewMockY(ctrl)\n  yMock.EXPECT().Call().Return("YResponse", nil)\n\n  _, err := DoComplexThing("inputY", xMock, yMock)\n  assert.EqualError(t, err, "Y failed")\n}\n'})})})]})})]}),"\n",(0,i.jsx)(n.p,{children:"This complexity makes it more difficult to change, understand, and prove the correctness of the test."}),"\n",(0,i.jsx)(n.p,{children:"While there are no strict guidelines, readability and maintainability should always be top-of-mind when deciding between\nTable Tests versus separate tests for multiple inputs/outputs to a system."}),"\n",(0,i.jsx)(n.h4,{id:"parallel-tests",children:"Parallel Tests"}),"\n",(0,i.jsx)(n.p,{children:"Parallel tests, like some specialized loops (for example, those that spawn goroutines or capture references as part of\nthe loop body), must take care to explicitly assign loop variables within the loop's scope to ensure that they hold the\nexpected values."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"tests := []struct{\n  give string\n  // ...\n}{\n  // ...\n}\n\nfor _, tt := range tests {\n  tt := tt // for t.Parallel\n  t.Run(tt.give, func(t *testing.T) {\n    t.Parallel()\n    // ...\n  })\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["In the example above, we must declare a ",(0,i.jsx)(n.code,{children:"tt"})," variable scoped to the loop iteration because of the use of ",(0,i.jsx)(n.code,{children:"t.Parallel()"}),"\nbelow. If we do not do that, most or all tests will receive an unexpected value for ",(0,i.jsx)(n.code,{children:"tt"}),", or a value that changes as\nthey're running."]}),"\n",(0,i.jsx)(n.h3,{id:"functional-options",children:"Functional Options"}),"\n",(0,i.jsxs)(n.p,{children:["Functional options is a pattern in which you declare an opaque ",(0,i.jsx)(n.code,{children:"Option"})," type that records information in some internal\nstruct. You accept a variadic number of these options and act upon the full information recorded by the options on the\ninternal struct."]}),"\n",(0,i.jsx)(n.p,{children:"Use this pattern for optional arguments in constructors and other public APIs that you foresee needing to expand,\nespecially if you already have three or more arguments on those functions."}),"\n",(0,i.jsxs)("table",{children:[(0,i.jsx)("thead",{children:(0,i.jsxs)("tr",{children:[(0,i.jsx)("th",{children:"Bad"}),(0,i.jsx)("th",{children:"Good"})]})}),(0,i.jsxs)("tbody",{children:[(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"// package db\n\nfunc Open(\n  addr string,\n  cache bool,\n  logger *zap.Logger\n) (*Connection, error) {\n  // ...\n}\n"})})}),(0,i.jsx)("td",{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"// package db\n\ntype Option interface {\n  // ...\n}\n\nfunc WithCache(c bool) Option {\n  // ...\n}\n\nfunc WithLogger(log *zap.Logger) Option {\n  // ...\n}\n\n// Open creates a connection.\nfunc Open(\n  addr string,\n  opts ...Option,\n) (*Connection, error) {\n  // ...\n}\n"})})})]}),(0,i.jsxs)("tr",{children:[(0,i.jsxs)("td",{children:[(0,i.jsx)(n.p,{children:"The cache and logger parameters must always be provided, even if the user wants to use the default."}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"db.Open(addr, db.DefaultCache, zap.NewNop())\ndb.Open(addr, db.DefaultCache, log)\ndb.Open(addr, false /* cache */, zap.NewNop())\ndb.Open(addr, false /* cache */, log)\n"})})]}),(0,i.jsxs)("td",{children:[(0,i.jsx)(n.p,{children:"Options are provided only if needed."}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"db.Open(addr)\ndb.Open(addr, db.WithLogger(log))\ndb.Open(addr, db.WithCache(false))\ndb.Open(\n  addr,\n  db.WithCache(false),\n  db.WithLogger(log),\n)\n"})})]})]})]})]}),"\n",(0,i.jsxs)(n.p,{children:["Our suggested way of implementing this pattern is with an ",(0,i.jsx)(n.code,{children:"Option"})," interface that holds an unexported method, recording\noptions on an unexported ",(0,i.jsx)(n.code,{children:"options"})," struct."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"type options struct {\n  cache  bool\n  logger *zap.Logger\n}\n\ntype Option interface {\n  apply(*options)\n}\n\ntype cacheOption bool\n\nfunc (c cacheOption) apply(opts *options) {\n  opts.cache = bool(c)\n}\n\nfunc WithCache(c bool) Option {\n  return cacheOption(c)\n}\n\ntype loggerOption struct {\n  Log *zap.Logger\n}\n\nfunc (l loggerOption) apply(opts *options) {\n  opts.logger = l.Log\n}\n\nfunc WithLogger(log *zap.Logger) Option {\n  return loggerOption{Log: log}\n}\n\n// Open creates a connection.\nfunc Open(\n  addr string,\n  opts ...Option,\n) (*Connection, error) {\n  options := options{\n    cache:  defaultCache,\n    logger: zap.NewNop(),\n  }\n\n  for _, o := range opts {\n    o.apply(&options)\n  }\n\n  // ...\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Note that there's a method of implementing this pattern with closures but we believe that the pattern above provides\nmore flexibility for authors and is easier to debug and test for users. In particular, it allows options to be compared\nagainst each other in tests and mocks, versus closures where this is impossible. Further, it lets options implement\nother interfaces, including ",(0,i.jsx)(n.code,{children:"fmt.Stringer"})," which allows for user-readable string representations of the options."]}),"\n",(0,i.jsx)(n.p,{children:"See also,"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://commandcenter.blogspot.com/2014/01/self-referential-functions-and-design.html",children:"Self-referential functions and the design of options"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://dave.cheney.net/2014/10/17/functional-options-for-friendly-apis",children:"Functional options for friendly APIs"})}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"linting",children:"Linting"}),"\n",(0,i.jsx)(n.p,{children:'More importantly than any "blessed" set of linters, lint consistently across a codebase.'}),"\n",(0,i.jsx)(n.p,{children:"We recommend using the following linters at a minimum, because we feel that they help to catch the most common issues\nand also establish a high bar for code quality without being unnecessarily prescriptive:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"https://github.com/kisielk/errcheck",children:"errcheck"})," to ensure that errors are handled"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"https://pkg.go.dev/golang.org/x/tools/cmd/goimports",children:"goimports"})," to format code and manage imports"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"https://github.com/golang/lint",children:"golint"})," to point out common style mistakes"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"https://pkg.go.dev/cmd/vet",children:"govet"})," to analyze code for common mistakes"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"https://staticcheck.dev",children:"staticcheck"})," to do various static analysis checks"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"lint-runners",children:"Lint Runners"}),"\n",(0,i.jsxs)(n.p,{children:["We recommend ",(0,i.jsx)(n.a,{href:"https://github.com/golangci/golangci-lint",children:"golangci-lint"})," as the go-to lint runner for Go code, largely\ndue to its performance in larger codebases and ability to configure and use many canonical linters at once."]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},28453:(e,n,r)=>{r.d(n,{R:()=>l,x:()=>a});var s=r(96540);const i={},t=s.createContext(i);function l(e){const n=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);